
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800639c  0800639c  0000739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063dc  080063dc  0000820c  2**0
                  CONTENTS
  4 .ARM          00000008  080063dc  080063dc  000073dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e4  080063e4  0000820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e4  080063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e8  080063e8  000073e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080063ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  2000020c  080065f8  0000820c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  080065f8  00008bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015572  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002918  00000000  00000000  0001d7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  000200c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6f  00000000  00000000  000211e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d1  00000000  00000000  00021f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014727  00000000  00000000  00048328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc105  00000000  00000000  0005ca4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158b54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  00158b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0015d48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006384 	.word	0x08006384

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08006384 	.word	0x08006384

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000228 	.word	0x20000228

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000228 	.word	0x20000228

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 fda5 	bl	80050c0 <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fb8b 	bl	8003cc4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fd2d 	bl	8005014 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fd44 	bl	800504c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f80b 	bl	80045e8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f004 f933 	bl	800485c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f002 ff01 	bl	8003414 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ffda 	bl	80035d4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000228 	.word	0x20000228
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f004 f880 	bl	800485c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f005 fd90 	bl	8006368 <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000228 	.word	0x20000228

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f005 fd2c 	bl	8006368 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000228 	.word	0x20000228

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000228 	.word	0x20000228

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000228 	.word	0x20000228

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000228 	.word	0x20000228

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f005 fc51 	bl	8006368 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f003 fe04 	bl	800475c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000228 	.word	0x20000228

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fd49 	bl	800160a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f848 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f000 f990 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b80:	f000 f95c 	bl	8000e3c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b84:	f000 f90c 	bl	8000da0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b88:	f000 f8da 	bl	8000d40 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000b8c:	f000 f88a 	bl	8000ca4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000b90:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <main+0x70>)
 8000b92:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <main+0x74>)
 8000b94:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000b96:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <main+0x70>)
 8000b98:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <main+0x78>)
 8000b9a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000b9c:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <main+0x70>)
 8000b9e:	2215      	movs	r2, #21
 8000ba0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <main+0x70>)
 8000ba4:	22c8      	movs	r2, #200	@ 0xc8
 8000ba6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000ba8:	4910      	ldr	r1, [pc, #64]	@ (8000bec <main+0x7c>)
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <main+0x70>)
 8000bac:	f7ff fcec 	bl	8000588 <Modbus_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000bb0:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <main+0x80>)
 8000bb2:	f002 fc2f 	bl	8003414 <HAL_TIM_Base_Start_IT>
  shelvePos[0] = 110.1; // actual position (mm)
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <main+0x84>)
 8000bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf8 <main+0x88>)
 8000bba:	601a      	str	r2, [r3, #0]
  shelvePos[1] = 260;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <main+0x84>)
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <main+0x8c>)
 8000bc0:	605a      	str	r2, [r3, #4]
  shelvePos[2] = 310;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <main+0x84>)
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <main+0x90>)
 8000bc6:	609a      	str	r2, [r3, #8]
  shelvePos[3] = 460;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <main+0x84>)
 8000bca:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <main+0x94>)
 8000bcc:	60da      	str	r2, [r3, #12]
  shelvePos[4] = 610;
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <main+0x84>)
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <main+0x98>)
 8000bd2:	611a      	str	r2, [r3, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000bd4:	f7ff fd64 	bl	80006a0 <Modbus_Protocal_Worker>
	  RoutineUpdate(); // turn into variable
 8000bd8:	f000 f9ec 	bl	8000fb4 <RoutineUpdate>
	  Modbus_Protocal_Worker();
 8000bdc:	bf00      	nop
 8000bde:	e7f9      	b.n	8000bd4 <main+0x64>
 8000be0:	20000550 	.word	0x20000550
 8000be4:	200003c4 	.word	0x200003c4
 8000be8:	200002f8 	.word	0x200002f8
 8000bec:	20000a28 	.word	0x20000a28
 8000bf0:	2000022c 	.word	0x2000022c
 8000bf4:	20000bb8 	.word	0x20000bb8
 8000bf8:	42dc3333 	.word	0x42dc3333
 8000bfc:	43820000 	.word	0x43820000
 8000c00:	439b0000 	.word	0x439b0000
 8000c04:	43e60000 	.word	0x43e60000
 8000c08:	44188000 	.word	0x44188000

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	@ 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0318 	add.w	r3, r7, #24
 8000c16:	2238      	movs	r2, #56	@ 0x38
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f005 fb78 	bl	8006310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f001 fb5c 	bl	80022ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3e:	2340      	movs	r3, #64	@ 0x40
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c46:	2302      	movs	r3, #2
 8000c48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c4e:	2355      	movs	r3, #85	@ 0x55
 8000c50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fbf6 	bl	8002454 <HAL_RCC_OscConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c6e:	f000 fb00 	bl	8001272 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c72:	230f      	movs	r3, #15
 8000c74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c76:	2303      	movs	r3, #3
 8000c78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2104      	movs	r1, #4
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fef4 	bl	8002a78 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c96:	f000 faec 	bl	8001272 <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3750      	adds	r7, #80	@ 0x50
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16999;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000ccc:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000cda:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000cee:	f002 fb2d 	bl	800334c <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000cf8:	f000 fabb 	bl	8001272 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000d0a:	f002 fe6b 	bl	80039e4 <HAL_TIM_ConfigClockSource>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d14:	f000 faad 	bl	8001272 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_TIM2_Init+0x98>)
 8000d26:	f003 fb19 	bl	800435c <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d30:	f000 fa9f 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000022c 	.word	0x2000022c

08000d40 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d46:	4a15      	ldr	r2, [pc, #84]	@ (8000d9c <MX_TIM16_Init+0x5c>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d4c:	22a9      	movs	r2, #169	@ 0xa9
 8000d4e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000d56:	4b10      	ldr	r3, [pc, #64]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d58:	f240 4279 	movw	r2, #1145	@ 0x479
 8000d5c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d70:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d72:	f002 faeb 	bl	800334c <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d7c:	f000 fa79 	bl	8001272 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d80:	2108      	movs	r1, #8
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_TIM16_Init+0x58>)
 8000d84:	f002 fbbe 	bl	8003504 <HAL_TIM_OnePulse_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000d8e:	f000 fa70 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200002f8 	.word	0x200002f8
 8000d9c:	40014400 	.word	0x40014400

08000da0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da4:	4b23      	ldr	r3, [pc, #140]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000da6:	4a24      	ldr	r2, [pc, #144]	@ (8000e38 <MX_USART2_UART_Init+0x98>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000daa:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000dac:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000db2:	4b20      	ldr	r3, [pc, #128]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000db4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000dee:	f003 fb9b 	bl	8004528 <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000df8:	f000 fa3b 	bl	8001272 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000e00:	f005 f9bb 	bl	800617a <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 fa32 	bl	8001272 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000e12:	f005 f9f0 	bl	80061f6 <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000e1c:	f000 fa29 	bl	8001272 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <MX_USART2_UART_Init+0x94>)
 8000e22:	f005 f971 	bl	8006108 <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000e2c:	f000 fa21 	bl	8001272 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200003c4 	.word	0x200003c4
 8000e38:	40004400 	.word	0x40004400

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <MX_DMA_Init+0x60>)
 8000e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e46:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <MX_DMA_Init+0x60>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <MX_DMA_Init+0x60>)
 8000e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_DMA_Init+0x60>)
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <MX_DMA_Init+0x60>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e66:	4b0d      	ldr	r3, [pc, #52]	@ (8000e9c <MX_DMA_Init+0x60>)
 8000e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200b      	movs	r0, #11
 8000e78:	f000 fd13 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e7c:	200b      	movs	r0, #11
 8000e7e:	f000 fd2a 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	200c      	movs	r0, #12
 8000e88:	f000 fd0b 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e8c:	200c      	movs	r0, #12
 8000e8e:	f000 fd22 	bl	80018d6 <HAL_NVIC_EnableIRQ>

}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a2e      	ldr	r2, [pc, #184]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a28      	ldr	r2, [pc, #160]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0320 	and.w	r3, r3, #32
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a22      	ldr	r2, [pc, #136]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_GPIO_Init+0xd4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2120      	movs	r1, #32
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1e:	f001 f9a9 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <MX_GPIO_Init+0xd8>)
 8000f3a:	f001 f819 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f001 f80a 	bl	8001f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2028      	movs	r0, #40	@ 0x28
 8000f62:	f000 fc9e 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f66:	2028      	movs	r0, #40	@ 0x28
 8000f68:	f000 fcb5 	bl	80018d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	@ 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000800 	.word	0x48000800

08000f7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a09      	ldr	r2, [pc, #36]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d109      	bne.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		if((registerFrame[0x00].U16) == 18537) // Heartbeat
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	f644 0269 	movw	r2, #18537	@ 0x4869
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d103      	bne.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			registerFrame[0x00].U16 = 22881;
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f9a:	f645 1261 	movw	r2, #22881	@ 0x5961
 8000f9e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	2000022c 	.word	0x2000022c
 8000fb0:	20000a28 	.word	0x20000a28

08000fb4 <RoutineUpdate>:
void RoutineUpdate(void) // manual vacuum , manual gripper , set shelve , home , point mode
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

///// Vacuum ////////////////
	if((registerFrame[0x02].U16) == 1) // vacuum toggled
 8000fba:	4ba1      	ldr	r3, [pc, #644]	@ (8001240 <RoutineUpdate+0x28c>)
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	2b01      	cmp	r3, #1
	{
		// Vacuum off
	}
//
///// Gripper ////////////////
	if((registerFrame[0x03].U16) == 1) // gripper toggled
 8000fc0:	4b9f      	ldr	r3, [pc, #636]	@ (8001240 <RoutineUpdate+0x28c>)
 8000fc2:	88db      	ldrh	r3, [r3, #6]
 8000fc4:	2b01      	cmp	r3, #1
		// Gripper Backward
	}
//
///// Base System Status ////////////////

	if((registerFrame[0x01].U16) == 1) //Set Shelves button pressed
 8000fc6:	4b9e      	ldr	r3, [pc, #632]	@ (8001240 <RoutineUpdate+0x28c>)
 8000fc8:	885b      	ldrh	r3, [r3, #2]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d153      	bne.n	8001076 <RoutineUpdate+0xc2>
	{
		(registerFrame[0x01].U16) = 0; //reset status
 8000fce:	4b9c      	ldr	r3, [pc, #624]	@ (8001240 <RoutineUpdate+0x28c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	805a      	strh	r2, [r3, #2]
		(registerFrame[0x10].U16) = 1; // Z-setting shelve
 8000fd4:	4b9a      	ldr	r3, [pc, #616]	@ (8001240 <RoutineUpdate+0x28c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	841a      	strh	r2, [r3, #32]
		// 1st -> 5th shelve position // unit : mm/10
		(registerFrame[0x23].U16) = shelvePos[0]*10;
 8000fda:	4b9a      	ldr	r3, [pc, #616]	@ (8001244 <RoutineUpdate+0x290>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fec:	ee17 3a90 	vmov	r3, s15
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b93      	ldr	r3, [pc, #588]	@ (8001240 <RoutineUpdate+0x28c>)
 8000ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		(registerFrame[0x24].U16) = shelvePos[1]*10;
 8000ff8:	4b92      	ldr	r3, [pc, #584]	@ (8001244 <RoutineUpdate+0x290>)
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800100a:	ee17 3a90 	vmov	r3, s15
 800100e:	b29a      	uxth	r2, r3
 8001010:	4b8b      	ldr	r3, [pc, #556]	@ (8001240 <RoutineUpdate+0x28c>)
 8001012:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		(registerFrame[0x25].U16) = shelvePos[2]*10; // Q : what variable is shelve position
 8001016:	4b8b      	ldr	r3, [pc, #556]	@ (8001244 <RoutineUpdate+0x290>)
 8001018:	edd3 7a02 	vldr	s15, [r3, #8]
 800101c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 3a90 	vmov	r3, s15
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b84      	ldr	r3, [pc, #528]	@ (8001240 <RoutineUpdate+0x28c>)
 8001030:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		(registerFrame[0x26].U16) = shelvePos[3]*10;
 8001034:	4b83      	ldr	r3, [pc, #524]	@ (8001244 <RoutineUpdate+0x290>)
 8001036:	edd3 7a03 	vldr	s15, [r3, #12]
 800103a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	ee17 3a90 	vmov	r3, s15
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b7c      	ldr	r3, [pc, #496]	@ (8001240 <RoutineUpdate+0x28c>)
 800104e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		(registerFrame[0x27].U16) = shelvePos[4]*10;
 8001052:	4b7c      	ldr	r3, [pc, #496]	@ (8001244 <RoutineUpdate+0x290>)
 8001054:	edd3 7a04 	vldr	s15, [r3, #16]
 8001058:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800105c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001064:	ee17 3a90 	vmov	r3, s15
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b75      	ldr	r3, [pc, #468]	@ (8001240 <RoutineUpdate+0x28c>)
 800106c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

		(registerFrame[0x10].U16) = 1; // Z-finished
 8001070:	4b73      	ldr	r3, [pc, #460]	@ (8001240 <RoutineUpdate+0x28c>)
 8001072:	2201      	movs	r2, #1
 8001074:	841a      	strh	r2, [r3, #32]
	}
//
	if((registerFrame[0x01].U16 == 2)) //home
 8001076:	4b72      	ldr	r3, [pc, #456]	@ (8001240 <RoutineUpdate+0x28c>)
 8001078:	885b      	ldrh	r3, [r3, #2]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d10e      	bne.n	800109c <RoutineUpdate+0xe8>
	{
		(registerFrame[0x01].U16) = 0; //reset status
 800107e:	4b70      	ldr	r3, [pc, #448]	@ (8001240 <RoutineUpdate+0x28c>)
 8001080:	2200      	movs	r2, #0
 8001082:	805a      	strh	r2, [r3, #2]
		(registerFrame[0x10].U16) = 2; //Z-home
 8001084:	4b6e      	ldr	r3, [pc, #440]	@ (8001240 <RoutineUpdate+0x28c>)
 8001086:	2202      	movs	r2, #2
 8001088:	841a      	strh	r2, [r3, #32]

		Goal = shelvePos[0]; // set goal to home
 800108a:	4b6e      	ldr	r3, [pc, #440]	@ (8001244 <RoutineUpdate+0x290>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a6e      	ldr	r2, [pc, #440]	@ (8001248 <RoutineUpdate+0x294>)
 8001090:	6013      	str	r3, [r2, #0]
		MoveToGoal();
 8001092:	f000 f8e7 	bl	8001264 <MoveToGoal>

		(registerFrame[0x10].U16) = 0; //Z-finished
 8001096:	4b6a      	ldr	r3, [pc, #424]	@ (8001240 <RoutineUpdate+0x28c>)
 8001098:	2200      	movs	r2, #0
 800109a:	841a      	strh	r2, [r3, #32]
	}
//
	if((registerFrame[0x01].U16 == 4)) // read Jog
 800109c:	4b68      	ldr	r3, [pc, #416]	@ (8001240 <RoutineUpdate+0x28c>)
 800109e:	885b      	ldrh	r3, [r3, #2]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d150      	bne.n	8001146 <RoutineUpdate+0x192>
	{
		(registerFrame[0x01].U16) = 0; //reset status
 80010a4:	4b66      	ldr	r3, [pc, #408]	@ (8001240 <RoutineUpdate+0x28c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	805a      	strh	r2, [r3, #2]

		orderPick = (registerFrame[0x21].U16);
 80010aa:	4b65      	ldr	r3, [pc, #404]	@ (8001240 <RoutineUpdate+0x28c>)
 80010ac:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80010b0:	4b66      	ldr	r3, [pc, #408]	@ (800124c <RoutineUpdate+0x298>)
 80010b2:	801a      	strh	r2, [r3, #0]
		orderPlace = (registerFrame[0x22].U16);
 80010b4:	4b62      	ldr	r3, [pc, #392]	@ (8001240 <RoutineUpdate+0x28c>)
 80010b6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80010ba:	4b65      	ldr	r3, [pc, #404]	@ (8001250 <RoutineUpdate+0x29c>)
 80010bc:	801a      	strh	r2, [r3, #0]
		// <code for JogMode>
		j = 0;
 80010be:	4b65      	ldr	r3, [pc, #404]	@ (8001254 <RoutineUpdate+0x2a0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

		for(uint16_t i = 10000;i>=1;i/=10) // to string
 80010c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80010c8:	80fb      	strh	r3, [r7, #6]
 80010ca:	e039      	b.n	8001140 <RoutineUpdate+0x18c>
		{
			pick[j] = orderPick/i; // use this for pick
 80010cc:	4b5f      	ldr	r3, [pc, #380]	@ (800124c <RoutineUpdate+0x298>)
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	4b60      	ldr	r3, [pc, #384]	@ (8001254 <RoutineUpdate+0x2a0>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b5e      	ldr	r3, [pc, #376]	@ (8001258 <RoutineUpdate+0x2a4>)
 80010e0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			place[j] = orderPlace/i; // use this for place
 80010e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001250 <RoutineUpdate+0x29c>)
 80010e6:	881a      	ldrh	r2, [r3, #0]
 80010e8:	4b5a      	ldr	r3, [pc, #360]	@ (8001254 <RoutineUpdate+0x2a0>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	4b59      	ldr	r3, [pc, #356]	@ (800125c <RoutineUpdate+0x2a8>)
 80010f8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			orderPick = orderPick%i;
 80010fc:	4b53      	ldr	r3, [pc, #332]	@ (800124c <RoutineUpdate+0x298>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	88fa      	ldrh	r2, [r7, #6]
 8001102:	fbb3 f1f2 	udiv	r1, r3, r2
 8001106:	fb01 f202 	mul.w	r2, r1, r2
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b4f      	ldr	r3, [pc, #316]	@ (800124c <RoutineUpdate+0x298>)
 8001110:	801a      	strh	r2, [r3, #0]
			orderPlace = orderPlace%i;
 8001112:	4b4f      	ldr	r3, [pc, #316]	@ (8001250 <RoutineUpdate+0x29c>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	88fa      	ldrh	r2, [r7, #6]
 8001118:	fbb3 f1f2 	udiv	r1, r3, r2
 800111c:	fb01 f202 	mul.w	r2, r1, r2
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b4a      	ldr	r3, [pc, #296]	@ (8001250 <RoutineUpdate+0x29c>)
 8001126:	801a      	strh	r2, [r3, #0]
			j++;
 8001128:	4b4a      	ldr	r3, [pc, #296]	@ (8001254 <RoutineUpdate+0x2a0>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b48      	ldr	r3, [pc, #288]	@ (8001254 <RoutineUpdate+0x2a0>)
 8001132:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 10000;i>=1;i/=10) // to string
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	4a4a      	ldr	r2, [pc, #296]	@ (8001260 <RoutineUpdate+0x2ac>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	80fb      	strh	r3, [r7, #6]
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1c2      	bne.n	80010cc <RoutineUpdate+0x118>
		}
	}
	if(j > 0) //  run Jog
 8001146:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <RoutineUpdate+0x2a0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d055      	beq.n	80011fa <RoutineUpdate+0x246>
	{
		if(((registerFrame[0x10].U16) == 8) || (((registerFrame[0x10].U16) == 0) && (j == 5))) // prev mode: place, do pick
 800114e:	4b3c      	ldr	r3, [pc, #240]	@ (8001240 <RoutineUpdate+0x28c>)
 8001150:	8c1b      	ldrh	r3, [r3, #32]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d007      	beq.n	8001166 <RoutineUpdate+0x1b2>
 8001156:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <RoutineUpdate+0x28c>)
 8001158:	8c1b      	ldrh	r3, [r3, #32]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d120      	bne.n	80011a0 <RoutineUpdate+0x1ec>
 800115e:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <RoutineUpdate+0x2a0>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b05      	cmp	r3, #5
 8001164:	d11c      	bne.n	80011a0 <RoutineUpdate+0x1ec>
		{
			(registerFrame[0x10].U16) = 4; // Z-go pick
 8001166:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <RoutineUpdate+0x28c>)
 8001168:	2204      	movs	r2, #4
 800116a:	841a      	strh	r2, [r3, #32]
			Goal = pick[5-j];
 800116c:	4b39      	ldr	r3, [pc, #228]	@ (8001254 <RoutineUpdate+0x2a0>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f1c3 0305 	rsb	r3, r3, #5
 8001174:	4a38      	ldr	r2, [pc, #224]	@ (8001258 <RoutineUpdate+0x2a4>)
 8001176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <RoutineUpdate+0x294>)
 8001184:	edc3 7a00 	vstr	s15, [r3]
			MoveToGoal();
 8001188:	f000 f86c 	bl	8001264 <MoveToGoal>
			// <code Gripper Forward>
			(registerFrame[0x03].U16) = 1;// likely to show no change in base system
 800118c:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <RoutineUpdate+0x28c>)
 800118e:	2201      	movs	r2, #1
 8001190:	80da      	strh	r2, [r3, #6]
			// <code Vacuum On>
			(registerFrame[0x02].U16) = 1;
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <RoutineUpdate+0x28c>)
 8001194:	2201      	movs	r2, #1
 8001196:	809a      	strh	r2, [r3, #4]
			// <code Gripper Backward>
			(registerFrame[0x03].U16) = 0;
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <RoutineUpdate+0x28c>)
 800119a:	2200      	movs	r2, #0
 800119c:	80da      	strh	r2, [r3, #6]
 800119e:	e025      	b.n	80011ec <RoutineUpdate+0x238>
		}
		else if((registerFrame[0x10].U16) == 4) // prev mode: pick, do place
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <RoutineUpdate+0x28c>)
 80011a2:	8c1b      	ldrh	r3, [r3, #32]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d121      	bne.n	80011ec <RoutineUpdate+0x238>
		{
			(registerFrame[0x10].U16) = 8; // Z-go place
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <RoutineUpdate+0x28c>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	841a      	strh	r2, [r3, #32]
			Goal = place[5-j];
 80011ae:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <RoutineUpdate+0x2a0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	f1c3 0305 	rsb	r3, r3, #5
 80011b6:	4a29      	ldr	r2, [pc, #164]	@ (800125c <RoutineUpdate+0x2a8>)
 80011b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c4:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <RoutineUpdate+0x294>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
			MoveToGoal();
 80011ca:	f000 f84b 	bl	8001264 <MoveToGoal>
			// <code Gripper Forward>
			(registerFrame[0x03].U16) = 1;// likely to show no change in base system
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <RoutineUpdate+0x28c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	80da      	strh	r2, [r3, #6]
			// <code Vacuum Off>
			(registerFrame[0x02].U16) = 0;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <RoutineUpdate+0x28c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	809a      	strh	r2, [r3, #4]
			// <code Gripper Backward>
			(registerFrame[0x03].U16) = 0;
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <RoutineUpdate+0x28c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	80da      	strh	r2, [r3, #6]
			j--;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <RoutineUpdate+0x2a0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <RoutineUpdate+0x2a0>)
 80011ea:	701a      	strb	r2, [r3, #0]
		}
		if(j == 0){
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <RoutineUpdate+0x2a0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <RoutineUpdate+0x246>
			(registerFrame[0x10].U16 = 0);
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <RoutineUpdate+0x28c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	841a      	strh	r2, [r3, #32]
		}

	}
//
	if((registerFrame[0x01].U16) == 8) // read & run Point
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <RoutineUpdate+0x28c>)
 80011fc:	885b      	ldrh	r3, [r3, #2]
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d119      	bne.n	8001236 <RoutineUpdate+0x282>
	{
		(registerFrame[0x01].U16) = 0; //reset status
 8001202:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <RoutineUpdate+0x28c>)
 8001204:	2200      	movs	r2, #0
 8001206:	805a      	strh	r2, [r3, #2]
		(registerFrame[0x10].U16) = 16; // Z-go point
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <RoutineUpdate+0x28c>)
 800120a:	2210      	movs	r2, #16
 800120c:	841a      	strh	r2, [r3, #32]

		Goal = (registerFrame[0x30].U16)/10;
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <RoutineUpdate+0x28c>)
 8001210:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001214:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <RoutineUpdate+0x2ac>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	08db      	lsrs	r3, r3, #3
 800121c:	b29b      	uxth	r3, r3
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <RoutineUpdate+0x294>)
 8001228:	edc3 7a00 	vstr	s15, [r3]
		MoveToGoal();
 800122c:	f000 f81a 	bl	8001264 <MoveToGoal>

		(registerFrame[0x10].U16) = 0; // Z-finished
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <RoutineUpdate+0x28c>)
 8001232:	2200      	movs	r2, #0
 8001234:	841a      	strh	r2, [r3, #32]
	}
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000a28 	.word	0x20000a28
 8001244:	20000bb8 	.word	0x20000bb8
 8001248:	20000bcc 	.word	0x20000bcc
 800124c:	20000be6 	.word	0x20000be6
 8001250:	20000be8 	.word	0x20000be8
 8001254:	20000bea 	.word	0x20000bea
 8001258:	20000bd0 	.word	0x20000bd0
 800125c:	20000bdc 	.word	0x20000bdc
 8001260:	cccccccd 	.word	0xcccccccd

08001264 <MoveToGoal>:

void MoveToGoal(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	// run to "Goal"
	//HAL_Delay(1000);
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001276:	b672      	cpsid	i
}
 8001278:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127a:	bf00      	nop
 800127c:	e7fd      	b.n	800127a <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	4a0e      	ldr	r2, [pc, #56]	@ (80012c4 <HAL_MspInit+0x44>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6613      	str	r3, [r2, #96]	@ 0x60
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a2:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012b6:	f001 f8bd 	bl	8002434 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d8:	d114      	bne.n	8001304 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	201c      	movs	r0, #28
 80012f8:	f000 fad3 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012fc:	201c      	movs	r0, #28
 80012fe:	f000 faea 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001302:	e018      	b.n	8001336 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <HAL_TIM_Base_MspInit+0x7c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d113      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_TIM_Base_MspInit+0x78>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a0b      	ldr	r2, [pc, #44]	@ (8001340 <HAL_TIM_Base_MspInit+0x78>)
 8001314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_TIM_Base_MspInit+0x78>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2019      	movs	r0, #25
 800132c:	f000 fab9 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001330:	2019      	movs	r0, #25
 8001332:	f000 fad0 	bl	80018d6 <HAL_NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40014400 	.word	0x40014400

08001348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b09e      	sub	sp, #120	@ 0x78
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	2254      	movs	r2, #84	@ 0x54
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f004 ffd1 	bl	8006310 <memset>
  if(huart->Instance==USART2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a4d      	ldr	r2, [pc, #308]	@ (80014a8 <HAL_UART_MspInit+0x160>)
 8001374:	4293      	cmp	r3, r2
 8001376:	f040 8092 	bne.w	800149e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fd92 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001392:	f7ff ff6e 	bl	8001272 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001396:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <HAL_UART_MspInit+0x164>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	4a44      	ldr	r2, [pc, #272]	@ (80014ac <HAL_UART_MspInit+0x164>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a2:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <HAL_UART_MspInit+0x164>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_UART_MspInit+0x164>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a3e      	ldr	r2, [pc, #248]	@ (80014ac <HAL_UART_MspInit+0x164>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <HAL_UART_MspInit+0x164>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013c6:	230c      	movs	r3, #12
 80013c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e4:	f000 fdc4 	bl	8001f70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80013e8:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 80013ea:	4a32      	ldr	r2, [pc, #200]	@ (80014b4 <HAL_UART_MspInit+0x16c>)
 80013ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80013ee:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 80013f0:	221b      	movs	r2, #27
 80013f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 8001402:	2280      	movs	r2, #128	@ 0x80
 8001404:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001406:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140c:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001412:	4b27      	ldr	r3, [pc, #156]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001418:	4b25      	ldr	r3, [pc, #148]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800141e:	4824      	ldr	r0, [pc, #144]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 8001420:	f000 fa74 	bl	800190c <HAL_DMA_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800142a:	f7ff ff22 	bl	8001272 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 8001432:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001434:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <HAL_UART_MspInit+0x168>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 800143c:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_UART_MspInit+0x174>)
 800143e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 8001442:	221a      	movs	r2, #26
 8001444:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 8001454:	2280      	movs	r2, #128	@ 0x80
 8001456:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001470:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 8001472:	f000 fa4b 	bl	800190c <HAL_DMA_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 800147c:	f7ff fef9 	bl	8001272 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 8001484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001488:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <HAL_UART_MspInit+0x170>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2026      	movs	r0, #38	@ 0x26
 8001494:	f000 fa05 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001498:	2026      	movs	r0, #38	@ 0x26
 800149a:	f000 fa1c 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3778      	adds	r7, #120	@ 0x78
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40004400 	.word	0x40004400
 80014ac:	40021000 	.word	0x40021000
 80014b0:	20000490 	.word	0x20000490
 80014b4:	40020008 	.word	0x40020008
 80014b8:	200004f0 	.word	0x200004f0
 80014bc:	4002001c 	.word	0x4002001c

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f8cb 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <DMA1_Channel1_IRQHandler+0x10>)
 8001526:	f000 fbd4 	bl	8001cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000490 	.word	0x20000490

08001534 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <DMA1_Channel2_IRQHandler+0x10>)
 800153a:	f000 fbca 	bl	8001cd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200004f0 	.word	0x200004f0

08001548 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800154e:	f002 f8cf 	bl	80036f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200002f8 	.word	0x200002f8

0800155c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <TIM2_IRQHandler+0x10>)
 8001562:	f002 f8c5 	bl	80036f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000022c 	.word	0x2000022c

08001570 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <USART2_IRQHandler+0x10>)
 8001576:	f003 f9bd 	bl	80048f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200003c4 	.word	0x200003c4

08001584 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001588:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800158c:	f000 fe8a 	bl	80022a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	@ (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	@ (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f004 fe9b 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff fac1 	bl	8000b70 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   r0, =_estack
 80015f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80015fc:	080063ec 	.word	0x080063ec
  ldr r2, =_sbss
 8001600:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001604:	20000bf0 	.word	0x20000bf0

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>

0800160a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 f939 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f80e 	bl	800163c <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	71fb      	strb	r3, [r7, #7]
 800162a:	e001      	b.n	8001630 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800162c:	f7ff fe28 	bl	8001280 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001630:	79fb      	ldrb	r3, [r7, #7]

}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_InitTick+0x68>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d022      	beq.n	8001696 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_InitTick+0x6c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_InitTick+0x68>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800165c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f944 	bl	80018f2 <HAL_SYSTICK_Config>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	d809      	bhi.n	800168a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001676:	2200      	movs	r2, #0
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	f000 f910 	bl	80018a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_InitTick+0x70>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e007      	b.n	800169a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e004      	b.n	800169a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e001      	b.n	800169a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000208 	.word	0x20000208
 80016a8:	20000200 	.word	0x20000200
 80016ac:	20000204 	.word	0x20000204

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_IncTick+0x1c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <HAL_IncTick+0x20>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	4a03      	ldr	r2, [pc, #12]	@ (80016cc <HAL_IncTick+0x1c>)
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20000bec 	.word	0x20000bec
 80016d0:	20000208 	.word	0x20000208

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000bec 	.word	0x20000bec

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	@ (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff40 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff33 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa4 	bl	8001848 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e08d      	b.n	8001a3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <HAL_DMA_Init+0x138>)
 8001926:	429a      	cmp	r2, r3
 8001928:	d80f      	bhi.n	800194a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b45      	ldr	r3, [pc, #276]	@ (8001a48 <HAL_DMA_Init+0x13c>)
 8001932:	4413      	add	r3, r2
 8001934:	4a45      	ldr	r2, [pc, #276]	@ (8001a4c <HAL_DMA_Init+0x140>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	009a      	lsls	r2, r3, #2
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <HAL_DMA_Init+0x144>)
 8001946:	641a      	str	r2, [r3, #64]	@ 0x40
 8001948:	e00e      	b.n	8001968 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	4b40      	ldr	r3, [pc, #256]	@ (8001a54 <HAL_DMA_Init+0x148>)
 8001952:	4413      	add	r3, r2
 8001954:	4a3d      	ldr	r2, [pc, #244]	@ (8001a4c <HAL_DMA_Init+0x140>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	009a      	lsls	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a3c      	ldr	r2, [pc, #240]	@ (8001a58 <HAL_DMA_Init+0x14c>)
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800197e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001982:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fa76 	bl	8001eac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019c8:	d102      	bne.n	80019d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <HAL_DMA_Init+0x104>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d80c      	bhi.n	8001a10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fa96 	bl	8001f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	e008      	b.n	8001a22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40020407 	.word	0x40020407
 8001a48:	bffdfff8 	.word	0xbffdfff8
 8001a4c:	cccccccd 	.word	0xcccccccd
 8001a50:	40020000 	.word	0x40020000
 8001a54:	bffdfbf8 	.word	0xbffdfbf8
 8001a58:	40020400 	.word	0x40020400

08001a5c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_DMA_Start_IT+0x20>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e066      	b.n	8001b4a <HAL_DMA_Start_IT+0xee>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d155      	bne.n	8001b3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f9bb 	bl	8001e30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 020e 	orr.w	r2, r2, #14
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e00f      	b.n	8001af4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0204 	bic.w	r2, r2, #4
 8001ae2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 020a 	orr.w	r2, r2, #10
 8001af2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e005      	b.n	8001b48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d005      	beq.n	8001b76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e037      	b.n	8001be6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 020e 	bic.w	r2, r2, #14
 8001b84:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b94:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f003 021f 	and.w	r2, r3, #31
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bc2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00c      	beq.n	8001be6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bda:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001be4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e047      	b.n	8001cc8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 020e 	bic.w	r2, r2, #14
 8001c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	2101      	movs	r1, #1
 8001c76:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c84:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ca6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
    }
  }
  return status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2204      	movs	r2, #4
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d026      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x7a>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d021      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0204 	bic.w	r2, r2, #4
 8001d24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f003 021f 	and.w	r2, r3, #31
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	2104      	movs	r1, #4
 8001d34:	fa01 f202 	lsl.w	r2, r1, r2
 8001d38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d071      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d4a:	e06c      	b.n	8001e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2202      	movs	r2, #2
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d02e      	beq.n	8001dbe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d029      	beq.n	8001dbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10b      	bne.n	8001d90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 020a 	bic.w	r2, r2, #10
 8001d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d038      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001dbc:	e033      	b.n	8001e26 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	2208      	movs	r2, #8
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d02a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d025      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 020e 	bic.w	r2, r2, #14
 8001dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d004      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
}
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e46:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e58:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f003 021f 	and.w	r2, r3, #31
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d108      	bne.n	8001e90 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e8e:	e007      	b.n	8001ea0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	60da      	str	r2, [r3, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d802      	bhi.n	8001ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e001      	b.n	8001eca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ec8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3b08      	subs	r3, #8
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	009a      	lsls	r2, r3, #2
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40020407 	.word	0x40020407
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020820 	.word	0x40020820
 8001f20:	cccccccd 	.word	0xcccccccd
 8001f24:	40020880 	.word	0x40020880

08001f28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	461a      	mov	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a08      	ldr	r2, [pc, #32]	@ (8001f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f4a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2201      	movs	r2, #1
 8001f56:	409a      	lsls	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	1000823f 	.word	0x1000823f
 8001f6c:	40020940 	.word	0x40020940

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f7e:	e15a      	b.n	8002236 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 814c 	beq.w	8002230 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d005      	beq.n	8001fb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d130      	bne.n	8002012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 0201 	and.w	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b03      	cmp	r3, #3
 800201c:	d017      	beq.n	800204e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d123      	bne.n	80020a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	6939      	ldr	r1, [r7, #16]
 800209e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0203 	and.w	r2, r3, #3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80a6 	beq.w	8002230 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e4:	4b5b      	ldr	r3, [pc, #364]	@ (8002254 <HAL_GPIO_Init+0x2e4>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e8:	4a5a      	ldr	r2, [pc, #360]	@ (8002254 <HAL_GPIO_Init+0x2e4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f0:	4b58      	ldr	r3, [pc, #352]	@ (8002254 <HAL_GPIO_Init+0x2e4>)
 80020f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020fc:	4a56      	ldr	r2, [pc, #344]	@ (8002258 <HAL_GPIO_Init+0x2e8>)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002126:	d01f      	beq.n	8002168 <HAL_GPIO_Init+0x1f8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a4c      	ldr	r2, [pc, #304]	@ (800225c <HAL_GPIO_Init+0x2ec>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d019      	beq.n	8002164 <HAL_GPIO_Init+0x1f4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a4b      	ldr	r2, [pc, #300]	@ (8002260 <HAL_GPIO_Init+0x2f0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d013      	beq.n	8002160 <HAL_GPIO_Init+0x1f0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a4a      	ldr	r2, [pc, #296]	@ (8002264 <HAL_GPIO_Init+0x2f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00d      	beq.n	800215c <HAL_GPIO_Init+0x1ec>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a49      	ldr	r2, [pc, #292]	@ (8002268 <HAL_GPIO_Init+0x2f8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_Init+0x1e8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a48      	ldr	r2, [pc, #288]	@ (800226c <HAL_GPIO_Init+0x2fc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_GPIO_Init+0x1e4>
 8002150:	2305      	movs	r3, #5
 8002152:	e00a      	b.n	800216a <HAL_GPIO_Init+0x1fa>
 8002154:	2306      	movs	r3, #6
 8002156:	e008      	b.n	800216a <HAL_GPIO_Init+0x1fa>
 8002158:	2304      	movs	r3, #4
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x1fa>
 800215c:	2303      	movs	r3, #3
 800215e:	e004      	b.n	800216a <HAL_GPIO_Init+0x1fa>
 8002160:	2302      	movs	r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x1fa>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_GPIO_Init+0x1fa>
 8002168:	2300      	movs	r3, #0
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4093      	lsls	r3, r2
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217a:	4937      	ldr	r1, [pc, #220]	@ (8002258 <HAL_GPIO_Init+0x2e8>)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002188:	4b39      	ldr	r3, [pc, #228]	@ (8002270 <HAL_GPIO_Init+0x300>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021ac:	4a30      	ldr	r2, [pc, #192]	@ (8002270 <HAL_GPIO_Init+0x300>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <HAL_GPIO_Init+0x300>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4013      	ands	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021d6:	4a26      	ldr	r2, [pc, #152]	@ (8002270 <HAL_GPIO_Init+0x300>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021dc:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <HAL_GPIO_Init+0x300>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002200:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_GPIO_Init+0x300>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002206:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <HAL_GPIO_Init+0x300>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800222a:	4a11      	ldr	r2, [pc, #68]	@ (8002270 <HAL_GPIO_Init+0x300>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	f47f ae9d 	bne.w	8001f80 <HAL_GPIO_Init+0x10>
  }
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	40010000 	.word	0x40010000
 800225c:	48000400 	.word	0x48000400
 8002260:	48000800 	.word	0x48000800
 8002264:	48000c00 	.word	0x48000c00
 8002268:	48001000 	.word	0x48001000
 800226c:	48001400 	.word	0x48001400
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002290:	e002      	b.n	8002298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022ae:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f806 	bl	80022d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d141      	bne.n	800237e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002306:	d131      	bne.n	800236c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002308:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800230e:	4a46      	ldr	r2, [pc, #280]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002318:	4b43      	ldr	r3, [pc, #268]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002320:	4a41      	ldr	r2, [pc, #260]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002328:	4b40      	ldr	r3, [pc, #256]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2232      	movs	r2, #50	@ 0x32
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	4a3f      	ldr	r2, [pc, #252]	@ (8002430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800233e:	e002      	b.n	8002346 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3b01      	subs	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002346:	4b38      	ldr	r3, [pc, #224]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800234e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002352:	d102      	bne.n	800235a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f2      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800235a:	4b33      	ldr	r3, [pc, #204]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002366:	d158      	bne.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e057      	b.n	800241c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800236c:	4b2e      	ldr	r3, [pc, #184]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002372:	4a2d      	ldr	r2, [pc, #180]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800237c:	e04d      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002384:	d141      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002386:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002392:	d131      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002394:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800239a:	4a23      	ldr	r2, [pc, #140]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a4:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2232      	movs	r2, #50	@ 0x32
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	4a1c      	ldr	r2, [pc, #112]	@ (8002430 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	3301      	adds	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ca:	e002      	b.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023de:	d102      	bne.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f2      	bne.n	80023cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f2:	d112      	bne.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e011      	b.n	800241c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002404:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002408:	e007      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002418:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40007000 	.word	0x40007000
 800242c:	20000200 	.word	0x20000200
 8002430:	431bde83 	.word	0x431bde83

08002434 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800243e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002442:	6093      	str	r3, [r2, #8]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e2fe      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d075      	beq.n	800255e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b97      	ldr	r3, [pc, #604]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800247c:	4b94      	ldr	r3, [pc, #592]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b0c      	cmp	r3, #12
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x3e>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d002      	beq.n	8002498 <HAL_RCC_OscConfig+0x44>
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b8d      	ldr	r3, [pc, #564]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d05b      	beq.n	800255c <HAL_RCC_OscConfig+0x108>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d157      	bne.n	800255c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e2d9      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b8:	d106      	bne.n	80024c8 <HAL_RCC_OscConfig+0x74>
 80024ba:	4b85      	ldr	r3, [pc, #532]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a84      	ldr	r2, [pc, #528]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e01d      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b7f      	ldr	r3, [pc, #508]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7e      	ldr	r2, [pc, #504]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b7c      	ldr	r3, [pc, #496]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7b      	ldr	r2, [pc, #492]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e00b      	b.n	8002504 <HAL_RCC_OscConfig+0xb0>
 80024ec:	4b78      	ldr	r3, [pc, #480]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a77      	ldr	r2, [pc, #476]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b75      	ldr	r3, [pc, #468]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a74      	ldr	r2, [pc, #464]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff f8e2 	bl	80016d4 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7ff f8de 	bl	80016d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	@ 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e29e      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002526:	4b6a      	ldr	r3, [pc, #424]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0xc0>
 8002532:	e014      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff f8ce 	bl	80016d4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff f8ca 	bl	80016d4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	@ 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e28a      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254e:	4b60      	ldr	r3, [pc, #384]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0xe8>
 800255a:	e000      	b.n	800255e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b56      	ldr	r3, [pc, #344]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0x136>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d002      	beq.n	8002590 <HAL_RCC_OscConfig+0x13c>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d11f      	bne.n	80025d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002590:	4b4f      	ldr	r3, [pc, #316]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x154>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e25d      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b49      	ldr	r3, [pc, #292]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	4946      	ldr	r1, [pc, #280]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025bc:	4b45      	ldr	r3, [pc, #276]	@ (80026d4 <HAL_RCC_OscConfig+0x280>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f83b 	bl	800163c <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d043      	beq.n	8002654 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e249      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d023      	beq.n	8002620 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d8:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3c      	ldr	r2, [pc, #240]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff f876 	bl	80016d4 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ec:	f7ff f872 	bl	80016d4 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e232      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025fe:	4b34      	ldr	r3, [pc, #208]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b31      	ldr	r3, [pc, #196]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	492d      	ldr	r1, [pc, #180]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
 800261e:	e01a      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2a      	ldr	r2, [pc, #168]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff f852 	bl	80016d4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7ff f84e 	bl	80016d4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e20e      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002646:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1e0>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002654:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d041      	beq.n	80026e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266a:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 800266c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002670:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7ff f82b 	bl	80016d4 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002682:	f7ff f827 	bl	80016d4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1e7      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0ef      	beq.n	8002682 <HAL_RCC_OscConfig+0x22e>
 80026a2:	e020      	b.n	80026e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a4:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026aa:	4a09      	ldr	r2, [pc, #36]	@ (80026d0 <HAL_RCC_OscConfig+0x27c>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff f80e 	bl	80016d4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ba:	e00d      	b.n	80026d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7ff f80a 	bl	80016d4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d906      	bls.n	80026d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1ca      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d8:	4b8c      	ldr	r3, [pc, #560]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80026da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ea      	bne.n	80026bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80a6 	beq.w	8002840 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026f8:	4b84      	ldr	r3, [pc, #528]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x2b4>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x2b6>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b7f      	ldr	r3, [pc, #508]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	4a7e      	ldr	r2, [pc, #504]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
 800271a:	4b7c      	ldr	r3, [pc, #496]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	4b79      	ldr	r3, [pc, #484]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002736:	4b76      	ldr	r3, [pc, #472]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a75      	ldr	r2, [pc, #468]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7fe ffc7 	bl	80016d4 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7fe ffc3 	bl	80016d4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e183      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275c:	4b6c      	ldr	r3, [pc, #432]	@ (8002910 <HAL_RCC_OscConfig+0x4bc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d108      	bne.n	8002782 <HAL_RCC_OscConfig+0x32e>
 8002770:	4b66      	ldr	r3, [pc, #408]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	4a65      	ldr	r2, [pc, #404]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002780:	e024      	b.n	80027cc <HAL_RCC_OscConfig+0x378>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d110      	bne.n	80027ac <HAL_RCC_OscConfig+0x358>
 800278a:	4b60      	ldr	r3, [pc, #384]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002790:	4a5e      	ldr	r2, [pc, #376]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800279a:	4b5c      	ldr	r3, [pc, #368]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	4a5a      	ldr	r2, [pc, #360]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_OscConfig+0x378>
 80027ac:	4b57      	ldr	r3, [pc, #348]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a56      	ldr	r2, [pc, #344]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027bc:	4b53      	ldr	r3, [pc, #332]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe ff7e 	bl	80016d4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe ff7a 	bl	80016d4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e138      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f2:	4b46      	ldr	r3, [pc, #280]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0ed      	beq.n	80027dc <HAL_RCC_OscConfig+0x388>
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe ff67 	bl	80016d4 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe ff63 	bl	80016d4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e121      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002820:	4b3a      	ldr	r3, [pc, #232]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ed      	bne.n	800280a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800282e:	7ffb      	ldrb	r3, [r7, #31]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b35      	ldr	r3, [pc, #212]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	4a34      	ldr	r2, [pc, #208]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d03c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01c      	beq.n	800288e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002854:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800285a:	4a2c      	ldr	r2, [pc, #176]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe ff36 	bl	80016d4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800286c:	f7fe ff32 	bl	80016d4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0f2      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0ef      	beq.n	800286c <HAL_RCC_OscConfig+0x418>
 800288c:	e01b      	b.n	80028c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002890:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002894:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289e:	f7fe ff19 	bl	80016d4 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a6:	f7fe ff15 	bl	80016d4 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e0d5      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028b8:	4b14      	ldr	r3, [pc, #80]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ef      	bne.n	80028a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80c9 	beq.w	8002a62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028d0:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b0c      	cmp	r3, #12
 80028da:	f000 8083 	beq.w	80029e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d15e      	bne.n	80029a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a08      	ldr	r2, [pc, #32]	@ (800290c <HAL_RCC_OscConfig+0x4b8>)
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe feef 	bl	80016d4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	e00c      	b.n	8002914 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe feeb 	bl	80016d4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d905      	bls.n	8002914 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0ab      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
 800290c:	40021000 	.word	0x40021000
 8002910:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	4b55      	ldr	r3, [pc, #340]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ec      	bne.n	80028fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b52      	ldr	r3, [pc, #328]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4b52      	ldr	r3, [pc, #328]	@ (8002a70 <HAL_RCC_OscConfig+0x61c>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6a11      	ldr	r1, [r2, #32]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002930:	3a01      	subs	r2, #1
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800293a:	0212      	lsls	r2, r2, #8
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002942:	0852      	lsrs	r2, r2, #1
 8002944:	3a01      	subs	r2, #1
 8002946:	0552      	lsls	r2, r2, #21
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0652      	lsls	r2, r2, #25
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800295a:	06d2      	lsls	r2, r2, #27
 800295c:	430a      	orrs	r2, r1
 800295e:	4943      	ldr	r1, [pc, #268]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a40      	ldr	r2, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002970:	4b3e      	ldr	r3, [pc, #248]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a3d      	ldr	r2, [pc, #244]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800297a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7fe feaa 	bl	80016d4 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7fe fea6 	bl	80016d4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e066      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b35      	ldr	r3, [pc, #212]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x530>
 80029a2:	e05e      	b.n	8002a62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a30      	ldr	r2, [pc, #192]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fe90 	bl	80016d4 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fe8c 	bl	80016d4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e04c      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ca:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029d6:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4924      	ldr	r1, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029dc:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <HAL_RCC_OscConfig+0x620>)
 80029de:	4013      	ands	r3, r2
 80029e0:	60cb      	str	r3, [r1, #12]
 80029e2:	e03e      	b.n	8002a62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e039      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <HAL_RCC_OscConfig+0x618>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d12c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d123      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d11b      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d113      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	085b      	lsrs	r3, r3, #1
 8002a42:	3b01      	subs	r3, #1
 8002a44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d001      	beq.n	8002a62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	019f800c 	.word	0x019f800c
 8002a74:	feeefffc 	.word	0xfeeefffc

08002a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e11e      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b91      	ldr	r3, [pc, #580]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d910      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 020f 	bic.w	r2, r3, #15
 8002aa6:	498c      	ldr	r1, [pc, #560]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e106      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d073      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d129      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad4:	4b81      	ldr	r3, [pc, #516]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0f4      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ae4:	f000 f99e 	bl	8002e24 <RCC_GetSysClockFreqFromPLLSource>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4a7c      	ldr	r2, [pc, #496]	@ (8002ce0 <HAL_RCC_ClockConfig+0x268>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d93f      	bls.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002af2:	4b7a      	ldr	r3, [pc, #488]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d033      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d12f      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b12:	4b72      	ldr	r3, [pc, #456]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b1a:	4a70      	ldr	r2, [pc, #448]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e024      	b.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b30:	4b6a      	ldr	r3, [pc, #424]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0c6      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b40:	4b66      	ldr	r3, [pc, #408]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0be      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b50:	f000 f8ce 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4a61      	ldr	r2, [pc, #388]	@ (8002ce0 <HAL_RCC_ClockConfig+0x268>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d909      	bls.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b66:	4a5d      	ldr	r2, [pc, #372]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b72:	4b5a      	ldr	r3, [pc, #360]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	4957      	ldr	r1, [pc, #348]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe fda6 	bl	80016d4 <HAL_GetTick>
 8002b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8c:	f7fe fda2 	bl	80016d4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e095      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 020c 	and.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1eb      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d023      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bcc:	4b43      	ldr	r3, [pc, #268]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a42      	ldr	r2, [pc, #264]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002be4:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002bec:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b39      	ldr	r3, [pc, #228]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4936      	ldr	r1, [pc, #216]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b80      	cmp	r3, #128	@ 0x80
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c0e:	4b33      	ldr	r3, [pc, #204]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4a32      	ldr	r2, [pc, #200]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d21d      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c28:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 020f 	bic.w	r2, r3, #15
 8002c30:	4929      	ldr	r1, [pc, #164]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fd4c 	bl	80016d4 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fd48 	bl	80016d4 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e03b      	b.n	8002cce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b20      	ldr	r3, [pc, #128]	@ (8002cd8 <HAL_RCC_ClockConfig+0x260>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1ed      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4917      	ldr	r1, [pc, #92]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490f      	ldr	r1, [pc, #60]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ca2:	f000 f825 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <HAL_RCC_ClockConfig+0x264>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490c      	ldr	r1, [pc, #48]	@ (8002ce4 <HAL_RCC_ClockConfig+0x26c>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce8 <HAL_RCC_ClockConfig+0x270>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <HAL_RCC_ClockConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fcb8 	bl	800163c <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	04c4b400 	.word	0x04c4b400
 8002ce4:	0800639c 	.word	0x0800639c
 8002ce8:	20000200 	.word	0x20000200
 8002cec:	20000204 	.word	0x20000204

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d102      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e047      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d08:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d14:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e03e      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d136      	bne.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d26:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d44:	4a1a      	ldr	r2, [pc, #104]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4e:	68d2      	ldr	r2, [r2, #12]
 8002d50:	0a12      	lsrs	r2, r2, #8
 8002d52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
      break;
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5e:	4a13      	ldr	r2, [pc, #76]	@ (8002dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4a10      	ldr	r2, [pc, #64]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d68:	68d2      	ldr	r2, [r2, #12]
 8002d6a:	0a12      	lsrs	r2, r2, #8
 8002d6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
      break;
 8002d76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0e5b      	lsrs	r3, r3, #25
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	e001      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d98:	693b      	ldr	r3, [r7, #16]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	016e3600 	.word	0x016e3600

08002db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000200 	.word	0x20000200

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4904      	ldr	r1, [pc, #16]	@ (8002df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	080063ac 	.word	0x080063ac

08002df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dfc:	f7ff ffda 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	0adb      	lsrs	r3, r3, #11
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	4904      	ldr	r1, [pc, #16]	@ (8002e20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e0e:	5ccb      	ldrb	r3, [r1, r3]
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	080063ac 	.word	0x080063ac

08002e24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d10c      	bne.n	8002e62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e48:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e52:	68d2      	ldr	r2, [r2, #12]
 8002e54:	0a12      	lsrs	r2, r2, #8
 8002e56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
    break;
 8002e60:	e00c      	b.n	8002e7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	0a12      	lsrs	r2, r2, #8
 8002e70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    break;
 8002e7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	0e5b      	lsrs	r3, r3, #25
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e96:	687b      	ldr	r3, [r7, #4]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	016e3600 	.word	0x016e3600
 8002eac:	00f42400 	.word	0x00f42400

08002eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb8:	2300      	movs	r3, #0
 8002eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8098 	beq.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b43      	ldr	r3, [pc, #268]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10d      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	4b40      	ldr	r3, [pc, #256]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002eea:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efa:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a39      	ldr	r2, [pc, #228]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f06:	f7fe fbe5 	bl	80016d4 <HAL_GetTick>
 8002f0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0c:	e009      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7fe fbe1 	bl	80016d4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d902      	bls.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	74fb      	strb	r3, [r7, #19]
        break;
 8002f20:	e005      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f22:	4b30      	ldr	r3, [pc, #192]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ef      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d159      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f34:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01e      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d019      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f50:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f5c:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f7c:	4a18      	ldr	r2, [pc, #96]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fba1 	bl	80016d4 <HAL_GetTick>
 8002f92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f94:	e00b      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fb9d 	bl	80016d4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d902      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	74fb      	strb	r3, [r7, #19]
            break;
 8002fac:	e006      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ec      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd0:	4903      	ldr	r1, [pc, #12]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	74bb      	strb	r3, [r7, #18]
 8002fde:	e005      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fec:	7c7b      	ldrb	r3, [r7, #17]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4ba7      	ldr	r3, [pc, #668]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	4aa6      	ldr	r2, [pc, #664]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800300a:	4ba1      	ldr	r3, [pc, #644]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003010:	f023 0203 	bic.w	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	499d      	ldr	r1, [pc, #628]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800302c:	4b98      	ldr	r3, [pc, #608]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	f023 020c 	bic.w	r2, r3, #12
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4995      	ldr	r1, [pc, #596]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800304e:	4b90      	ldr	r3, [pc, #576]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003054:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	498c      	ldr	r1, [pc, #560]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003070:	4b87      	ldr	r3, [pc, #540]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003076:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	4984      	ldr	r1, [pc, #528]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003092:	4b7f      	ldr	r3, [pc, #508]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003098:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	497b      	ldr	r1, [pc, #492]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b4:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	4973      	ldr	r1, [pc, #460]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	496a      	ldr	r1, [pc, #424]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f8:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4962      	ldr	r1, [pc, #392]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800311a:	4b5d      	ldr	r3, [pc, #372]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	4959      	ldr	r1, [pc, #356]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800313c:	4b54      	ldr	r3, [pc, #336]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	4951      	ldr	r1, [pc, #324]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800315e:	4b4c      	ldr	r3, [pc, #304]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	4948      	ldr	r1, [pc, #288]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d015      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003180:	4b43      	ldr	r3, [pc, #268]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4940      	ldr	r1, [pc, #256]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800319e:	d105      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d015      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031b8:	4b35      	ldr	r3, [pc, #212]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c6:	4932      	ldr	r1, [pc, #200]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031d6:	d105      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d015      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031f0:	4b27      	ldr	r3, [pc, #156]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	4924      	ldr	r1, [pc, #144]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800320e:	d105      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003210:	4b1f      	ldr	r3, [pc, #124]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800321a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003236:	4916      	ldr	r1, [pc, #88]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003246:	d105      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a10      	ldr	r2, [pc, #64]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003252:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d019      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4908      	ldr	r1, [pc, #32]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800327e:	d109      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003280:	4b03      	ldr	r3, [pc, #12]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a02      	ldr	r2, [pc, #8]	@ (8003290 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800328a:	60d3      	str	r3, [r2, #12]
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d015      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032a0:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	4926      	ldr	r1, [pc, #152]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032be:	d105      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e6:	4918      	ldr	r1, [pc, #96]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f6:	d105      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032f8:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a12      	ldr	r2, [pc, #72]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003302:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d015      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003310:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003312:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	490a      	ldr	r1, [pc, #40]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332e:	d105      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a04      	ldr	r2, [pc, #16]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800333a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800333c:	7cbb      	ldrb	r3, [r7, #18]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e054      	b.n	8003408 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d111      	bne.n	800338e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 ff7c 	bl	8004270 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <HAL_TIM_Base_Init+0xc4>)
 8003384:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	4619      	mov	r1, r3
 80033a0:	4610      	mov	r0, r2
 80033a2:	f000 fdef 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	080012c9 	.word	0x080012c9

08003414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e054      	b.n	80034d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a26      	ldr	r2, [pc, #152]	@ (80034e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d022      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x80>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003456:	d01d      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x80>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d018      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x80>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x80>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x80>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x80>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_TIM_Base_Start_IT+0x80>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_TIM_Base_Start_IT+0xe8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d115      	bne.n	80034c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_TIM_Base_Start_IT+0xec>)
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d015      	beq.n	80034d2 <HAL_TIM_Base_Start_IT+0xbe>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ac:	d011      	beq.n	80034d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	e008      	b.n	80034d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e000      	b.n	80034d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40015000 	.word	0x40015000
 8003500:	00010007 	.word	0x00010007

08003504 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e04c      	b.n	80035b2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d111      	bne.n	8003548 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fe9f 	bl	8004270 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1f      	ldr	r2, [pc, #124]	@ (80035bc <HAL_TIM_OnePulse_Init+0xb8>)
 800353e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 fd12 	bl	8003f84 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0208 	bic.w	r2, r2, #8
 800356e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6819      	ldr	r1, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	080035c1 	.word	0x080035c1

080035c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035fc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d105      	bne.n	8003616 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800360a:	7b7b      	ldrb	r3, [r7, #13]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d102      	bne.n	8003616 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003610:	7b3b      	ldrb	r3, [r7, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e059      	b.n	80036ce <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2202      	movs	r2, #2
 8003626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2202      	movs	r2, #2
 800362e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0202 	orr.w	r2, r2, #2
 8003648:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0204 	orr.w	r2, r2, #4
 8003658:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fdde 	bl	8004224 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	2104      	movs	r1, #4
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fdd7 	bl	8004224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a17      	ldr	r2, [pc, #92]	@ (80036d8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a14      	ldr	r2, [pc, #80]	@ (80036e0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a11      	ldr	r2, [pc, #68]	@ (80036e8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0f      	ldr	r2, [pc, #60]	@ (80036ec <HAL_TIM_OnePulse_Start_IT+0x118>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40013400 	.word	0x40013400
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40014400 	.word	0x40014400
 80036e8:	40014800 	.word	0x40014800
 80036ec:	40015000 	.word	0x40015000

080036f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d026      	beq.n	8003760 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d021      	beq.n	8003760 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0202 	mvn.w	r2, #2
 8003724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
 8003744:	e009      	b.n	800375a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d026      	beq.n	80037b8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d021      	beq.n	80037b8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0204 	mvn.w	r2, #4
 800377c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e009      	b.n	80037b2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d026      	beq.n	8003810 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0208 	mvn.w	r2, #8
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
 80037f4:	e009      	b.n	800380a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d026      	beq.n	8003868 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d021      	beq.n	8003868 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2208      	movs	r2, #8
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
 800384c:	e009      	b.n	8003862 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00e      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0201 	mvn.w	r2, #1
 8003884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00e      	beq.n	8003912 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f06f 0220 	mvn.w	r2, #32
 800392e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800397e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80039a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00e      	beq.n	80039da <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80039ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_ConfigClockSource+0x1c>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0f6      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x20a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003a1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf8 <HAL_TIM_ConfigClockSource+0x214>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f000 80c1 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a40:	4a6d      	ldr	r2, [pc, #436]	@ (8003bf8 <HAL_TIM_ConfigClockSource+0x214>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	f200 80c6 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a48:	4a6c      	ldr	r2, [pc, #432]	@ (8003bfc <HAL_TIM_ConfigClockSource+0x218>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	f000 80b9 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a50:	4a6a      	ldr	r2, [pc, #424]	@ (8003bfc <HAL_TIM_ConfigClockSource+0x218>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	f200 80be 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a58:	4a69      	ldr	r2, [pc, #420]	@ (8003c00 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	f000 80b1 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a60:	4a67      	ldr	r2, [pc, #412]	@ (8003c00 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	f200 80b6 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a68:	4a66      	ldr	r2, [pc, #408]	@ (8003c04 <HAL_TIM_ConfigClockSource+0x220>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f000 80a9 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a70:	4a64      	ldr	r2, [pc, #400]	@ (8003c04 <HAL_TIM_ConfigClockSource+0x220>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f200 80ae 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a78:	4a63      	ldr	r2, [pc, #396]	@ (8003c08 <HAL_TIM_ConfigClockSource+0x224>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	f000 80a1 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a80:	4a61      	ldr	r2, [pc, #388]	@ (8003c08 <HAL_TIM_ConfigClockSource+0x224>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f200 80a6 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a88:	4a60      	ldr	r2, [pc, #384]	@ (8003c0c <HAL_TIM_ConfigClockSource+0x228>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	f000 8099 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003a90:	4a5e      	ldr	r2, [pc, #376]	@ (8003c0c <HAL_TIM_ConfigClockSource+0x228>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	f200 809e 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003a98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003a9c:	f000 8091 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003aa0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003aa4:	f200 8096 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003aa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aac:	f000 8089 	beq.w	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003ab0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab4:	f200 808e 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003abc:	d03e      	beq.n	8003b3c <HAL_TIM_ConfigClockSource+0x158>
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac2:	f200 8087 	bhi.w	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	f000 8086 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1f6>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	d87f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad4:	2b70      	cmp	r3, #112	@ 0x70
 8003ad6:	d01a      	beq.n	8003b0e <HAL_TIM_ConfigClockSource+0x12a>
 8003ad8:	2b70      	cmp	r3, #112	@ 0x70
 8003ada:	d87b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003adc:	2b60      	cmp	r3, #96	@ 0x60
 8003ade:	d050      	beq.n	8003b82 <HAL_TIM_ConfigClockSource+0x19e>
 8003ae0:	2b60      	cmp	r3, #96	@ 0x60
 8003ae2:	d877      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae4:	2b50      	cmp	r3, #80	@ 0x50
 8003ae6:	d03c      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0x17e>
 8003ae8:	2b50      	cmp	r3, #80	@ 0x50
 8003aea:	d873      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	d058      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0x1be>
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d86f      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003af4:	2b30      	cmp	r3, #48	@ 0x30
 8003af6:	d064      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003af8:	2b30      	cmp	r3, #48	@ 0x30
 8003afa:	d86b      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d060      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d867      	bhi.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d05c      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d05a      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x1de>
 8003b0c:	e062      	b.n	8003bd4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b1e:	f000 fb61 	bl	80041e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
      break;
 8003b3a:	e04f      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	f000 fb4a 	bl	80041e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b5e:	609a      	str	r2, [r3, #8]
      break;
 8003b60:	e03c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f000 fabc 	bl	80040ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2150      	movs	r1, #80	@ 0x50
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb15 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003b80:	e02c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f000 fadb 	bl	800414a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2160      	movs	r1, #96	@ 0x60
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fb05 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003ba0:	e01c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 fa9c 	bl	80040ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2140      	movs	r1, #64	@ 0x40
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 faf5 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e00c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f000 faec 	bl	80041aa <TIM_ITRx_SetConfig>
      break;
 8003bd2:	e003      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	00100070 	.word	0x00100070
 8003bfc:	00100060 	.word	0x00100060
 8003c00:	00100050 	.word	0x00100050
 8003c04:	00100040 	.word	0x00100040
 8003c08:	00100030 	.word	0x00100030
 8003c0c:	00100020 	.word	0x00100020

08003c10 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e14a      	b.n	8003f76 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f040 80dd 	bne.w	8003ea8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	2b1f      	cmp	r3, #31
 8003cf2:	f200 80d6 	bhi.w	8003ea2 <HAL_TIM_RegisterCallback+0x1de>
 8003cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <HAL_TIM_RegisterCallback+0x38>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d7d 	.word	0x08003d7d
 8003d00:	08003d85 	.word	0x08003d85
 8003d04:	08003d8d 	.word	0x08003d8d
 8003d08:	08003d95 	.word	0x08003d95
 8003d0c:	08003d9d 	.word	0x08003d9d
 8003d10:	08003da5 	.word	0x08003da5
 8003d14:	08003dad 	.word	0x08003dad
 8003d18:	08003db5 	.word	0x08003db5
 8003d1c:	08003dbd 	.word	0x08003dbd
 8003d20:	08003dc5 	.word	0x08003dc5
 8003d24:	08003dcd 	.word	0x08003dcd
 8003d28:	08003dd5 	.word	0x08003dd5
 8003d2c:	08003ddd 	.word	0x08003ddd
 8003d30:	08003de5 	.word	0x08003de5
 8003d34:	08003def 	.word	0x08003def
 8003d38:	08003df9 	.word	0x08003df9
 8003d3c:	08003e03 	.word	0x08003e03
 8003d40:	08003e0d 	.word	0x08003e0d
 8003d44:	08003e17 	.word	0x08003e17
 8003d48:	08003e21 	.word	0x08003e21
 8003d4c:	08003e2b 	.word	0x08003e2b
 8003d50:	08003e35 	.word	0x08003e35
 8003d54:	08003e3f 	.word	0x08003e3f
 8003d58:	08003e49 	.word	0x08003e49
 8003d5c:	08003e53 	.word	0x08003e53
 8003d60:	08003e5d 	.word	0x08003e5d
 8003d64:	08003e67 	.word	0x08003e67
 8003d68:	08003e71 	.word	0x08003e71
 8003d6c:	08003e7b 	.word	0x08003e7b
 8003d70:	08003e85 	.word	0x08003e85
 8003d74:	08003e8f 	.word	0x08003e8f
 8003d78:	08003e99 	.word	0x08003e99
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003d82:	e0f7      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003d8a:	e0f3      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003d92:	e0ef      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003d9a:	e0eb      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003da2:	e0e7      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003daa:	e0e3      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003db2:	e0df      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003dba:	e0db      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003dc2:	e0d7      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003dca:	e0d3      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003dd2:	e0cf      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003dda:	e0cb      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003de2:	e0c7      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003dec:	e0c2      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8003df6:	e0bd      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003e00:	e0b8      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8003e0a:	e0b3      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003e14:	e0ae      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003e1e:	e0a9      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003e28:	e0a4      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003e32:	e09f      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003e3c:	e09a      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003e46:	e095      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003e50:	e090      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003e5a:	e08b      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003e64:	e086      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003e6e:	e081      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003e78:	e07c      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003e82:	e077      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003e8c:	e072      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003e96:	e06d      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003ea0:	e068      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
        break;
 8003ea6:	e065      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d15d      	bne.n	8003f70 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
 8003eb6:	2b0d      	cmp	r3, #13
 8003eb8:	d857      	bhi.n	8003f6a <HAL_TIM_RegisterCallback+0x2a6>
 8003eba:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <HAL_TIM_RegisterCallback+0x1fc>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ef9 	.word	0x08003ef9
 8003ec4:	08003f01 	.word	0x08003f01
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f11 	.word	0x08003f11
 8003ed0:	08003f19 	.word	0x08003f19
 8003ed4:	08003f21 	.word	0x08003f21
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f31 	.word	0x08003f31
 8003ee0:	08003f39 	.word	0x08003f39
 8003ee4:	08003f41 	.word	0x08003f41
 8003ee8:	08003f49 	.word	0x08003f49
 8003eec:	08003f51 	.word	0x08003f51
 8003ef0:	08003f59 	.word	0x08003f59
 8003ef4:	08003f61 	.word	0x08003f61
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003efe:	e039      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003f06:	e035      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003f0e:	e031      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003f16:	e02d      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003f1e:	e029      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003f26:	e025      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003f2e:	e021      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003f36:	e01d      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003f3e:	e019      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003f46:	e015      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003f4e:	e011      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003f56:	e00d      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003f5e:	e009      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003f68:	e004      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
        break;
 8003f6e:	e001      	b.n	8003f74 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a4c      	ldr	r2, [pc, #304]	@ (80040c8 <TIM_Base_SetConfig+0x144>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d017      	beq.n	8003fcc <TIM_Base_SetConfig+0x48>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa2:	d013      	beq.n	8003fcc <TIM_Base_SetConfig+0x48>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a49      	ldr	r2, [pc, #292]	@ (80040cc <TIM_Base_SetConfig+0x148>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00f      	beq.n	8003fcc <TIM_Base_SetConfig+0x48>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a48      	ldr	r2, [pc, #288]	@ (80040d0 <TIM_Base_SetConfig+0x14c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <TIM_Base_SetConfig+0x48>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a47      	ldr	r2, [pc, #284]	@ (80040d4 <TIM_Base_SetConfig+0x150>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d007      	beq.n	8003fcc <TIM_Base_SetConfig+0x48>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a46      	ldr	r2, [pc, #280]	@ (80040d8 <TIM_Base_SetConfig+0x154>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_Base_SetConfig+0x48>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a45      	ldr	r2, [pc, #276]	@ (80040dc <TIM_Base_SetConfig+0x158>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d108      	bne.n	8003fde <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a39      	ldr	r2, [pc, #228]	@ (80040c8 <TIM_Base_SetConfig+0x144>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d023      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fec:	d01f      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a36      	ldr	r2, [pc, #216]	@ (80040cc <TIM_Base_SetConfig+0x148>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01b      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a35      	ldr	r2, [pc, #212]	@ (80040d0 <TIM_Base_SetConfig+0x14c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d017      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a34      	ldr	r2, [pc, #208]	@ (80040d4 <TIM_Base_SetConfig+0x150>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a33      	ldr	r2, [pc, #204]	@ (80040d8 <TIM_Base_SetConfig+0x154>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a33      	ldr	r2, [pc, #204]	@ (80040e0 <TIM_Base_SetConfig+0x15c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a32      	ldr	r2, [pc, #200]	@ (80040e4 <TIM_Base_SetConfig+0x160>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a31      	ldr	r2, [pc, #196]	@ (80040e8 <TIM_Base_SetConfig+0x164>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_Base_SetConfig+0xaa>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <TIM_Base_SetConfig+0x158>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a18      	ldr	r2, [pc, #96]	@ (80040c8 <TIM_Base_SetConfig+0x144>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x110>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1a      	ldr	r2, [pc, #104]	@ (80040d8 <TIM_Base_SetConfig+0x154>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x110>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1a      	ldr	r2, [pc, #104]	@ (80040e0 <TIM_Base_SetConfig+0x15c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x110>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a19      	ldr	r2, [pc, #100]	@ (80040e4 <TIM_Base_SetConfig+0x160>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x110>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <TIM_Base_SetConfig+0x164>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x110>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a13      	ldr	r2, [pc, #76]	@ (80040dc <TIM_Base_SetConfig+0x158>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f023 0201 	bic.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	611a      	str	r2, [r3, #16]
  }
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40015000 	.word	0x40015000
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 030a 	bic.w	r3, r3, #10
 8004128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f023 0210 	bic.w	r2, r3, #16
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80041c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f043 0307 	orr.w	r3, r3, #7
 80041d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	021a      	lsls	r2, r3, #8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	431a      	orrs	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2201      	movs	r2, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	43db      	mvns	r3, r3
 8004246:	401a      	ands	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1a      	ldr	r2, [r3, #32]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a26      	ldr	r2, [pc, #152]	@ (8004314 <TIM_ResetCallback+0xa4>)
 800427c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a25      	ldr	r2, [pc, #148]	@ (8004318 <TIM_ResetCallback+0xa8>)
 8004284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a24      	ldr	r2, [pc, #144]	@ (800431c <TIM_ResetCallback+0xac>)
 800428c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a23      	ldr	r2, [pc, #140]	@ (8004320 <TIM_ResetCallback+0xb0>)
 8004294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a22      	ldr	r2, [pc, #136]	@ (8004324 <TIM_ResetCallback+0xb4>)
 800429c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a21      	ldr	r2, [pc, #132]	@ (8004328 <TIM_ResetCallback+0xb8>)
 80042a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a20      	ldr	r2, [pc, #128]	@ (800432c <TIM_ResetCallback+0xbc>)
 80042ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004330 <TIM_ResetCallback+0xc0>)
 80042b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004334 <TIM_ResetCallback+0xc4>)
 80042bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004338 <TIM_ResetCallback+0xc8>)
 80042c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <TIM_ResetCallback+0xcc>)
 80042cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004340 <TIM_ResetCallback+0xd0>)
 80042d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1a      	ldr	r2, [pc, #104]	@ (8004344 <TIM_ResetCallback+0xd4>)
 80042dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a19      	ldr	r2, [pc, #100]	@ (8004348 <TIM_ResetCallback+0xd8>)
 80042e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a18      	ldr	r2, [pc, #96]	@ (800434c <TIM_ResetCallback+0xdc>)
 80042ec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a17      	ldr	r2, [pc, #92]	@ (8004350 <TIM_ResetCallback+0xe0>)
 80042f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a16      	ldr	r2, [pc, #88]	@ (8004354 <TIM_ResetCallback+0xe4>)
 80042fc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <TIM_ResetCallback+0xe8>)
 8004304:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	08000f7d 	.word	0x08000f7d
 8004318:	08003c11 	.word	0x08003c11
 800431c:	08003c89 	.word	0x08003c89
 8004320:	08003c9d 	.word	0x08003c9d
 8004324:	08003c39 	.word	0x08003c39
 8004328:	08003c4d 	.word	0x08003c4d
 800432c:	08003c25 	.word	0x08003c25
 8004330:	08003c61 	.word	0x08003c61
 8004334:	08003c75 	.word	0x08003c75
 8004338:	08003cb1 	.word	0x08003cb1
 800433c:	08004489 	.word	0x08004489
 8004340:	0800449d 	.word	0x0800449d
 8004344:	080044b1 	.word	0x080044b1
 8004348:	080044c5 	.word	0x080044c5
 800434c:	080044d9 	.word	0x080044d9
 8004350:	080044ed 	.word	0x080044ed
 8004354:	08004501 	.word	0x08004501
 8004358:	08004515 	.word	0x08004515

0800435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e074      	b.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a34      	ldr	r2, [pc, #208]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a33      	ldr	r2, [pc, #204]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a31      	ldr	r2, [pc, #196]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a21      	ldr	r2, [pc, #132]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d022      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f4:	d01d      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004478 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d018      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1d      	ldr	r2, [pc, #116]	@ (800447c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1c      	ldr	r2, [pc, #112]	@ (8004480 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a11      	ldr	r2, [pc, #68]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10c      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40013400 	.word	0x40013400
 8004474:	40015000 	.word	0x40015000
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800
 8004480:	40000c00 	.word	0x40000c00
 8004484:	40014000 	.word	0x40014000

08004488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e050      	b.n	80045dc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	2b00      	cmp	r3, #0
 8004542:	d114      	bne.n	800456e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fdc5 	bl	80050dc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a21      	ldr	r2, [pc, #132]	@ (80045e4 <HAL_UART_Init+0xbc>)
 8004560:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2224      	movs	r2, #36	@ 0x24
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 f8f2 	bl	8005778 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fdf3 	bl	8005180 <UART_SetConfig>
 800459a:	4603      	mov	r3, r0
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e01b      	b.n	80045dc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 f971 	bl	80058bc <UART_CheckIdleState>
 80045da:	4603      	mov	r3, r0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	08001349 	.word	0x08001349

080045e8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	460b      	mov	r3, r1
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e09c      	b.n	800474e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	2b20      	cmp	r3, #32
 800461c:	d16c      	bne.n	80046f8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800461e:	7afb      	ldrb	r3, [r7, #11]
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d85e      	bhi.n	80046e2 <HAL_UART_RegisterCallback+0xfa>
 8004624:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <HAL_UART_RegisterCallback+0x44>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004661 	.word	0x08004661
 8004630:	0800466b 	.word	0x0800466b
 8004634:	08004675 	.word	0x08004675
 8004638:	0800467f 	.word	0x0800467f
 800463c:	08004689 	.word	0x08004689
 8004640:	08004693 	.word	0x08004693
 8004644:	0800469d 	.word	0x0800469d
 8004648:	080046a7 	.word	0x080046a7
 800464c:	080046b1 	.word	0x080046b1
 8004650:	080046bb 	.word	0x080046bb
 8004654:	080046c5 	.word	0x080046c5
 8004658:	080046cf 	.word	0x080046cf
 800465c:	080046d9 	.word	0x080046d9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8004668:	e070      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8004672:	e06b      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800467c:	e066      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8004686:	e061      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8004690:	e05c      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800469a:	e057      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80046a4:	e052      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80046ae:	e04d      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80046b8:	e048      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80046c2:	e043      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80046cc:	e03e      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80046d6:	e039      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80046e0:	e034      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	75fb      	strb	r3, [r7, #23]
        break;
 80046f6:	e029      	b.n	800474c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11a      	bne.n	8004738 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004702:	7afb      	ldrb	r3, [r7, #11]
 8004704:	2b0b      	cmp	r3, #11
 8004706:	d002      	beq.n	800470e <HAL_UART_RegisterCallback+0x126>
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d005      	beq.n	8004718 <HAL_UART_RegisterCallback+0x130>
 800470c:	e009      	b.n	8004722 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004716:	e019      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004720:	e014      	b.n	800474c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004728:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
        break;
 8004736:	e009      	b.n	800474c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800474c:	7dfb      	ldrb	r3, [r7, #23]
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop

0800475c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	2b20      	cmp	r3, #32
 8004772:	d167      	bne.n	8004844 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_UART_Transmit_DMA+0x24>
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e060      	b.n	8004846 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	88fa      	ldrh	r2, [r7, #6]
 8004796:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2221      	movs	r2, #33	@ 0x21
 80047a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d028      	beq.n	8004804 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047b6:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <HAL_UART_Transmit_DMA+0xf4>)
 80047b8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047be:	4a25      	ldr	r2, [pc, #148]	@ (8004854 <HAL_UART_Transmit_DMA+0xf8>)
 80047c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c6:	4a24      	ldr	r2, [pc, #144]	@ (8004858 <HAL_UART_Transmit_DMA+0xfc>)
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ce:	2200      	movs	r2, #0
 80047d0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047da:	4619      	mov	r1, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3328      	adds	r3, #40	@ 0x28
 80047e2:	461a      	mov	r2, r3
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	f7fd f939 	bl	8001a5c <HAL_DMA_Start_IT>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d009      	beq.n	8004804 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2210      	movs	r2, #16
 80047f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e020      	b.n	8004846 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2240      	movs	r2, #64	@ 0x40
 800480a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	613b      	str	r3, [r7, #16]
   return(result);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482c:	623a      	str	r2, [r7, #32]
 800482e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	69f9      	ldr	r1, [r7, #28]
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	61bb      	str	r3, [r7, #24]
   return(result);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3728      	adds	r7, #40	@ 0x28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	08005d87 	.word	0x08005d87
 8004854:	08005e25 	.word	0x08005e25
 8004858:	08005fbf 	.word	0x08005fbf

0800485c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	@ 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004870:	2b20      	cmp	r3, #32
 8004872:	d137      	bne.n	80048e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <HAL_UART_Receive_DMA+0x24>
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e030      	b.n	80048e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a18      	ldr	r2, [pc, #96]	@ (80048f0 <HAL_UART_Receive_DMA+0x94>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d01f      	beq.n	80048d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d018      	beq.n	80048d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	613b      	str	r3, [r7, #16]
   return(result);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	69f9      	ldr	r1, [r7, #28]
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	461a      	mov	r2, r3
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f001 f906 	bl	8005aec <UART_Start_Receive_DMA>
 80048e0:	4603      	mov	r3, r0
 80048e2:	e000      	b.n	80048e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3728      	adds	r7, #40	@ 0x28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40008000 	.word	0x40008000

080048f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b0ba      	sub	sp, #232	@ 0xe8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800491a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800491e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004922:	4013      	ands	r3, r2
 8004924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004928:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11b      	bne.n	8004968 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800493c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 82f3 	beq.w	8004f44 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	4798      	blx	r3
      }
      return;
 8004966:	e2ed      	b.n	8004f44 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004968:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8129 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004972:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004976:	4b90      	ldr	r3, [pc, #576]	@ (8004bb8 <HAL_UART_IRQHandler+0x2c4>)
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800497e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004982:	4b8e      	ldr	r3, [pc, #568]	@ (8004bbc <HAL_UART_IRQHandler+0x2c8>)
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 811c 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800498c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d011      	beq.n	80049bc <HAL_UART_IRQHandler+0xc8>
 8004998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b2:	f043 0201 	orr.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d011      	beq.n	80049ec <HAL_UART_IRQHandler+0xf8>
 80049c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2202      	movs	r2, #2
 80049da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	f043 0204 	orr.w	r2, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d011      	beq.n	8004a1c <HAL_UART_IRQHandler+0x128>
 80049f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a12:	f043 0202 	orr.w	r2, r3, #2
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d017      	beq.n	8004a58 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a34:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004a38:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb8 <HAL_UART_IRQHandler+0x2c4>)
 8004a3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2208      	movs	r2, #8
 8004a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4e:	f043 0208 	orr.w	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d012      	beq.n	8004a8a <HAL_UART_IRQHandler+0x196>
 8004a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8259 	beq.w	8004f48 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d013      	beq.n	8004aca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ade:	2b40      	cmp	r3, #64	@ 0x40
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ae6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d058      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 f8e3 	bl	8005cba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afe:	2b40      	cmp	r3, #64	@ 0x40
 8004b00:	d148      	bne.n	8004b94 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3308      	adds	r3, #8
 8004b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1d9      	bne.n	8004b02 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d017      	beq.n	8004b88 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <HAL_UART_IRQHandler+0x2cc>)
 8004b60:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fd f84b 	bl	8001c04 <HAL_DMA_Abort_IT>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01f      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004b82:	4610      	mov	r0, r2
 8004b84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b86:	e015      	b.n	8004bb4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b92:	e00f      	b.n	8004bb4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9e:	e009      	b.n	8004bb4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004bb2:	e1c9      	b.n	8004f48 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	bf00      	nop
    return;
 8004bb6:	e1c7      	b.n	8004f48 <HAL_UART_IRQHandler+0x654>
 8004bb8:	10000001 	.word	0x10000001
 8004bbc:	04000120 	.word	0x04000120
 8004bc0:	08006043 	.word	0x08006043

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	f040 8157 	bne.w	8004e7c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8150 	beq.w	8004e7c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8149 	beq.w	8004e7c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2210      	movs	r2, #16
 8004bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	f040 80bd 	bne.w	8004d7c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8199 	beq.w	8004f4c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c24:	429a      	cmp	r2, r3
 8004c26:	f080 8191 	bcs.w	8004f4c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 8087 	bne.w	8004d56 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1da      	bne.n	8004c48 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e1      	bne.n	8004c92 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e3      	bne.n	8004cce <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e4      	bne.n	8004d14 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fc fefe 	bl	8001b52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	1a8a      	subs	r2, r1, r2
 8004d72:	b292      	uxth	r2, r2
 8004d74:	4611      	mov	r1, r2
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d7a:	e0e7      	b.n	8004f4c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80d9 	beq.w	8004f50 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80d4 	beq.w	8004f50 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e4      	bne.n	8004da8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	623b      	str	r3, [r7, #32]
   return(result);
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e1      	bne.n	8004dde <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
 8004e42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	69b9      	ldr	r1, [r7, #24]
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e4      	bne.n	8004e2e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e70:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004e74:	4611      	mov	r1, r2
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e7a:	e069      	b.n	8004f50 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d010      	beq.n	8004eaa <HAL_UART_IRQHandler+0x5b6>
 8004e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004e9c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ea8:	e055      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d014      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d03e      	beq.n	8004f54 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
    }
    return;
 8004ede:	e039      	b.n	8004f54 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_UART_IRQHandler+0x60c>
 8004eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 f8ba 	bl	8006072 <UART_EndTransmit_IT>
    return;
 8004efe:	e02a      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_UART_IRQHandler+0x630>
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f22:	e018      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d012      	beq.n	8004f56 <HAL_UART_IRQHandler+0x662>
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	da0e      	bge.n	8004f56 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f42:	e008      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
      return;
 8004f44:	bf00      	nop
 8004f46:	e006      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
    return;
 8004f48:	bf00      	nop
 8004f4a:	e004      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
      return;
 8004f4c:	bf00      	nop
 8004f4e:	e002      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
      return;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <HAL_UART_IRQHandler+0x662>
    return;
 8004f54:	bf00      	nop
  }
}
 8004f56:	37e8      	adds	r7, #232	@ 0xe8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d009      	beq.n	800503c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	615a      	str	r2, [r3, #20]
  }
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	40008000 	.word	0x40008000

0800504c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <HAL_UART_EnableReceiverTimeout+0x70>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d027      	beq.n	80050ae <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005064:	2b20      	cmp	r3, #32
 8005066:	d120      	bne.n	80050aa <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_UART_EnableReceiverTimeout+0x2a>
 8005072:	2302      	movs	r3, #2
 8005074:	e01c      	b.n	80050b0 <HAL_UART_EnableReceiverTimeout+0x64>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2224      	movs	r2, #36	@ 0x24
 8005082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005094:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e002      	b.n	80050b0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80050aa:	2302      	movs	r3, #2
 80050ac:	e000      	b.n	80050b0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
  }
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40008000 	.word	0x40008000

080050c0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005150 <UART_InitCallbacksToDefault+0x74>)
 80050e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a19      	ldr	r2, [pc, #100]	@ (8005154 <UART_InitCallbacksToDefault+0x78>)
 80050f0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a18      	ldr	r2, [pc, #96]	@ (8005158 <UART_InitCallbacksToDefault+0x7c>)
 80050f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a17      	ldr	r2, [pc, #92]	@ (800515c <UART_InitCallbacksToDefault+0x80>)
 8005100:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a16      	ldr	r2, [pc, #88]	@ (8005160 <UART_InitCallbacksToDefault+0x84>)
 8005108:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a15      	ldr	r2, [pc, #84]	@ (8005164 <UART_InitCallbacksToDefault+0x88>)
 8005110:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a14      	ldr	r2, [pc, #80]	@ (8005168 <UART_InitCallbacksToDefault+0x8c>)
 8005118:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a13      	ldr	r2, [pc, #76]	@ (800516c <UART_InitCallbacksToDefault+0x90>)
 8005120:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a12      	ldr	r2, [pc, #72]	@ (8005170 <UART_InitCallbacksToDefault+0x94>)
 8005128:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a11      	ldr	r2, [pc, #68]	@ (8005174 <UART_InitCallbacksToDefault+0x98>)
 8005130:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a10      	ldr	r2, [pc, #64]	@ (8005178 <UART_InitCallbacksToDefault+0x9c>)
 8005138:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a0f      	ldr	r2, [pc, #60]	@ (800517c <UART_InitCallbacksToDefault+0xa0>)
 8005140:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	08004f71 	.word	0x08004f71
 8005154:	08004f5d 	.word	0x08004f5d
 8005158:	08004f99 	.word	0x08004f99
 800515c:	08004f85 	.word	0x08004f85
 8005160:	08004fad 	.word	0x08004fad
 8005164:	08004fc1 	.word	0x08004fc1
 8005168:	08004fd5 	.word	0x08004fd5
 800516c:	08004fe9 	.word	0x08004fe9
 8005170:	080060cd 	.word	0x080060cd
 8005174:	080060e1 	.word	0x080060e1
 8005178:	080060f5 	.word	0x080060f5
 800517c:	08004ffd 	.word	0x08004ffd

08005180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005184:	b08c      	sub	sp, #48	@ 0x30
 8005186:	af00      	add	r7, sp, #0
 8005188:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	431a      	orrs	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	431a      	orrs	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4baa      	ldr	r3, [pc, #680]	@ (8005458 <UART_SetConfig+0x2d8>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a9f      	ldr	r2, [pc, #636]	@ (800545c <UART_SetConfig+0x2dc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051e8:	4313      	orrs	r3, r2
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005200:	430b      	orrs	r3, r1
 8005202:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	f023 010f 	bic.w	r1, r3, #15
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a90      	ldr	r2, [pc, #576]	@ (8005460 <UART_SetConfig+0x2e0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d125      	bne.n	8005270 <UART_SetConfig+0xf0>
 8005224:	4b8f      	ldr	r3, [pc, #572]	@ (8005464 <UART_SetConfig+0x2e4>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d81a      	bhi.n	8005268 <UART_SetConfig+0xe8>
 8005232:	a201      	add	r2, pc, #4	@ (adr r2, 8005238 <UART_SetConfig+0xb8>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	08005249 	.word	0x08005249
 800523c:	08005259 	.word	0x08005259
 8005240:	08005251 	.word	0x08005251
 8005244:	08005261 	.word	0x08005261
 8005248:	2301      	movs	r3, #1
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524e:	e116      	b.n	800547e <UART_SetConfig+0x2fe>
 8005250:	2302      	movs	r3, #2
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005256:	e112      	b.n	800547e <UART_SetConfig+0x2fe>
 8005258:	2304      	movs	r3, #4
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525e:	e10e      	b.n	800547e <UART_SetConfig+0x2fe>
 8005260:	2308      	movs	r3, #8
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005266:	e10a      	b.n	800547e <UART_SetConfig+0x2fe>
 8005268:	2310      	movs	r3, #16
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526e:	e106      	b.n	800547e <UART_SetConfig+0x2fe>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a7c      	ldr	r2, [pc, #496]	@ (8005468 <UART_SetConfig+0x2e8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d138      	bne.n	80052ec <UART_SetConfig+0x16c>
 800527a:	4b7a      	ldr	r3, [pc, #488]	@ (8005464 <UART_SetConfig+0x2e4>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005280:	f003 030c 	and.w	r3, r3, #12
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d82d      	bhi.n	80052e4 <UART_SetConfig+0x164>
 8005288:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0x110>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052c5 	.word	0x080052c5
 8005294:	080052e5 	.word	0x080052e5
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052e5 	.word	0x080052e5
 80052a0:	080052d5 	.word	0x080052d5
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	080052e5 	.word	0x080052e5
 80052ac:	080052e5 	.word	0x080052e5
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052e5 	.word	0x080052e5
 80052b8:	080052e5 	.word	0x080052e5
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052dd 	.word	0x080052dd
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e0d8      	b.n	800547e <UART_SetConfig+0x2fe>
 80052cc:	2302      	movs	r3, #2
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e0d4      	b.n	800547e <UART_SetConfig+0x2fe>
 80052d4:	2304      	movs	r3, #4
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052da:	e0d0      	b.n	800547e <UART_SetConfig+0x2fe>
 80052dc:	2308      	movs	r3, #8
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e2:	e0cc      	b.n	800547e <UART_SetConfig+0x2fe>
 80052e4:	2310      	movs	r3, #16
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ea:	e0c8      	b.n	800547e <UART_SetConfig+0x2fe>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a5e      	ldr	r2, [pc, #376]	@ (800546c <UART_SetConfig+0x2ec>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d125      	bne.n	8005342 <UART_SetConfig+0x1c2>
 80052f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005464 <UART_SetConfig+0x2e4>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005300:	2b30      	cmp	r3, #48	@ 0x30
 8005302:	d016      	beq.n	8005332 <UART_SetConfig+0x1b2>
 8005304:	2b30      	cmp	r3, #48	@ 0x30
 8005306:	d818      	bhi.n	800533a <UART_SetConfig+0x1ba>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d00a      	beq.n	8005322 <UART_SetConfig+0x1a2>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d814      	bhi.n	800533a <UART_SetConfig+0x1ba>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <UART_SetConfig+0x19a>
 8005314:	2b10      	cmp	r3, #16
 8005316:	d008      	beq.n	800532a <UART_SetConfig+0x1aa>
 8005318:	e00f      	b.n	800533a <UART_SetConfig+0x1ba>
 800531a:	2300      	movs	r3, #0
 800531c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005320:	e0ad      	b.n	800547e <UART_SetConfig+0x2fe>
 8005322:	2302      	movs	r3, #2
 8005324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005328:	e0a9      	b.n	800547e <UART_SetConfig+0x2fe>
 800532a:	2304      	movs	r3, #4
 800532c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005330:	e0a5      	b.n	800547e <UART_SetConfig+0x2fe>
 8005332:	2308      	movs	r3, #8
 8005334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005338:	e0a1      	b.n	800547e <UART_SetConfig+0x2fe>
 800533a:	2310      	movs	r3, #16
 800533c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005340:	e09d      	b.n	800547e <UART_SetConfig+0x2fe>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a4a      	ldr	r2, [pc, #296]	@ (8005470 <UART_SetConfig+0x2f0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d125      	bne.n	8005398 <UART_SetConfig+0x218>
 800534c:	4b45      	ldr	r3, [pc, #276]	@ (8005464 <UART_SetConfig+0x2e4>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005356:	2bc0      	cmp	r3, #192	@ 0xc0
 8005358:	d016      	beq.n	8005388 <UART_SetConfig+0x208>
 800535a:	2bc0      	cmp	r3, #192	@ 0xc0
 800535c:	d818      	bhi.n	8005390 <UART_SetConfig+0x210>
 800535e:	2b80      	cmp	r3, #128	@ 0x80
 8005360:	d00a      	beq.n	8005378 <UART_SetConfig+0x1f8>
 8005362:	2b80      	cmp	r3, #128	@ 0x80
 8005364:	d814      	bhi.n	8005390 <UART_SetConfig+0x210>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <UART_SetConfig+0x1f0>
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d008      	beq.n	8005380 <UART_SetConfig+0x200>
 800536e:	e00f      	b.n	8005390 <UART_SetConfig+0x210>
 8005370:	2300      	movs	r3, #0
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005376:	e082      	b.n	800547e <UART_SetConfig+0x2fe>
 8005378:	2302      	movs	r3, #2
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537e:	e07e      	b.n	800547e <UART_SetConfig+0x2fe>
 8005380:	2304      	movs	r3, #4
 8005382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005386:	e07a      	b.n	800547e <UART_SetConfig+0x2fe>
 8005388:	2308      	movs	r3, #8
 800538a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538e:	e076      	b.n	800547e <UART_SetConfig+0x2fe>
 8005390:	2310      	movs	r3, #16
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005396:	e072      	b.n	800547e <UART_SetConfig+0x2fe>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a35      	ldr	r2, [pc, #212]	@ (8005474 <UART_SetConfig+0x2f4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d12a      	bne.n	80053f8 <UART_SetConfig+0x278>
 80053a2:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <UART_SetConfig+0x2e4>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053b0:	d01a      	beq.n	80053e8 <UART_SetConfig+0x268>
 80053b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053b6:	d81b      	bhi.n	80053f0 <UART_SetConfig+0x270>
 80053b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053bc:	d00c      	beq.n	80053d8 <UART_SetConfig+0x258>
 80053be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053c2:	d815      	bhi.n	80053f0 <UART_SetConfig+0x270>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <UART_SetConfig+0x250>
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053cc:	d008      	beq.n	80053e0 <UART_SetConfig+0x260>
 80053ce:	e00f      	b.n	80053f0 <UART_SetConfig+0x270>
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e052      	b.n	800547e <UART_SetConfig+0x2fe>
 80053d8:	2302      	movs	r3, #2
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053de:	e04e      	b.n	800547e <UART_SetConfig+0x2fe>
 80053e0:	2304      	movs	r3, #4
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e04a      	b.n	800547e <UART_SetConfig+0x2fe>
 80053e8:	2308      	movs	r3, #8
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ee:	e046      	b.n	800547e <UART_SetConfig+0x2fe>
 80053f0:	2310      	movs	r3, #16
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f6:	e042      	b.n	800547e <UART_SetConfig+0x2fe>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a17      	ldr	r2, [pc, #92]	@ (800545c <UART_SetConfig+0x2dc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d13a      	bne.n	8005478 <UART_SetConfig+0x2f8>
 8005402:	4b18      	ldr	r3, [pc, #96]	@ (8005464 <UART_SetConfig+0x2e4>)
 8005404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005408:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800540c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005410:	d01a      	beq.n	8005448 <UART_SetConfig+0x2c8>
 8005412:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005416:	d81b      	bhi.n	8005450 <UART_SetConfig+0x2d0>
 8005418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800541c:	d00c      	beq.n	8005438 <UART_SetConfig+0x2b8>
 800541e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005422:	d815      	bhi.n	8005450 <UART_SetConfig+0x2d0>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <UART_SetConfig+0x2b0>
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542c:	d008      	beq.n	8005440 <UART_SetConfig+0x2c0>
 800542e:	e00f      	b.n	8005450 <UART_SetConfig+0x2d0>
 8005430:	2300      	movs	r3, #0
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005436:	e022      	b.n	800547e <UART_SetConfig+0x2fe>
 8005438:	2302      	movs	r3, #2
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543e:	e01e      	b.n	800547e <UART_SetConfig+0x2fe>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005446:	e01a      	b.n	800547e <UART_SetConfig+0x2fe>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544e:	e016      	b.n	800547e <UART_SetConfig+0x2fe>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005456:	e012      	b.n	800547e <UART_SetConfig+0x2fe>
 8005458:	cfff69f3 	.word	0xcfff69f3
 800545c:	40008000 	.word	0x40008000
 8005460:	40013800 	.word	0x40013800
 8005464:	40021000 	.word	0x40021000
 8005468:	40004400 	.word	0x40004400
 800546c:	40004800 	.word	0x40004800
 8005470:	40004c00 	.word	0x40004c00
 8005474:	40005000 	.word	0x40005000
 8005478:	2310      	movs	r3, #16
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4aae      	ldr	r2, [pc, #696]	@ (800573c <UART_SetConfig+0x5bc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	f040 8097 	bne.w	80055b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800548a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800548e:	2b08      	cmp	r3, #8
 8005490:	d823      	bhi.n	80054da <UART_SetConfig+0x35a>
 8005492:	a201      	add	r2, pc, #4	@ (adr r2, 8005498 <UART_SetConfig+0x318>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054db 	.word	0x080054db
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054db 	.word	0x080054db
 80054a8:	080054cb 	.word	0x080054cb
 80054ac:	080054db 	.word	0x080054db
 80054b0:	080054db 	.word	0x080054db
 80054b4:	080054db 	.word	0x080054db
 80054b8:	080054d3 	.word	0x080054d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054bc:	f7fd fc86 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80054c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054c2:	e010      	b.n	80054e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c4:	4b9e      	ldr	r3, [pc, #632]	@ (8005740 <UART_SetConfig+0x5c0>)
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054c8:	e00d      	b.n	80054e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	f7fd fc11 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 80054ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054d0:	e009      	b.n	80054e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054d8:	e005      	b.n	80054e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8130 	beq.w	800574e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f2:	4a94      	ldr	r2, [pc, #592]	@ (8005744 <UART_SetConfig+0x5c4>)
 80054f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005500:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	4413      	add	r3, r2
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	429a      	cmp	r2, r3
 8005510:	d305      	bcc.n	800551e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	429a      	cmp	r2, r3
 800551c:	d903      	bls.n	8005526 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005524:	e113      	b.n	800574e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	2200      	movs	r2, #0
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	60fa      	str	r2, [r7, #12]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	4a84      	ldr	r2, [pc, #528]	@ (8005744 <UART_SetConfig+0x5c4>)
 8005534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005538:	b29b      	uxth	r3, r3
 800553a:	2200      	movs	r2, #0
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005544:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005548:	f7fa fe66 	bl	8000218 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	020b      	lsls	r3, r1, #8
 800555e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005562:	0202      	lsls	r2, r0, #8
 8005564:	6979      	ldr	r1, [r7, #20]
 8005566:	6849      	ldr	r1, [r1, #4]
 8005568:	0849      	lsrs	r1, r1, #1
 800556a:	2000      	movs	r0, #0
 800556c:	460c      	mov	r4, r1
 800556e:	4605      	mov	r5, r0
 8005570:	eb12 0804 	adds.w	r8, r2, r4
 8005574:	eb43 0905 	adc.w	r9, r3, r5
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	469a      	mov	sl, r3
 8005580:	4693      	mov	fp, r2
 8005582:	4652      	mov	r2, sl
 8005584:	465b      	mov	r3, fp
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f7fa fe45 	bl	8000218 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4613      	mov	r3, r2
 8005594:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800559c:	d308      	bcc.n	80055b0 <UART_SetConfig+0x430>
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055a4:	d204      	bcs.n	80055b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a3a      	ldr	r2, [r7, #32]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	e0ce      	b.n	800574e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055b6:	e0ca      	b.n	800574e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c0:	d166      	bne.n	8005690 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d827      	bhi.n	800561a <UART_SetConfig+0x49a>
 80055ca:	a201      	add	r2, pc, #4	@ (adr r2, 80055d0 <UART_SetConfig+0x450>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	08005605 	.word	0x08005605
 80055dc:	0800561b 	.word	0x0800561b
 80055e0:	0800560b 	.word	0x0800560b
 80055e4:	0800561b 	.word	0x0800561b
 80055e8:	0800561b 	.word	0x0800561b
 80055ec:	0800561b 	.word	0x0800561b
 80055f0:	08005613 	.word	0x08005613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f4:	f7fd fbea 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80055f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055fa:	e014      	b.n	8005626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055fc:	f7fd fbfc 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 8005600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005602:	e010      	b.n	8005626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005604:	4b4e      	ldr	r3, [pc, #312]	@ (8005740 <UART_SetConfig+0x5c0>)
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005608:	e00d      	b.n	8005626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560a:	f7fd fb71 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 800560e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005610:	e009      	b.n	8005626 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005618:	e005      	b.n	8005626 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8090 	beq.w	800574e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005632:	4a44      	ldr	r2, [pc, #272]	@ (8005744 <UART_SetConfig+0x5c4>)
 8005634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005638:	461a      	mov	r2, r3
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005640:	005a      	lsls	r2, r3, #1
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	441a      	add	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	2b0f      	cmp	r3, #15
 8005658:	d916      	bls.n	8005688 <UART_SetConfig+0x508>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005660:	d212      	bcs.n	8005688 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	b29b      	uxth	r3, r3
 8005666:	f023 030f 	bic.w	r3, r3, #15
 800566a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	b29b      	uxth	r3, r3
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	b29a      	uxth	r2, r3
 8005678:	8bfb      	ldrh	r3, [r7, #30]
 800567a:	4313      	orrs	r3, r2
 800567c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	8bfa      	ldrh	r2, [r7, #30]
 8005684:	60da      	str	r2, [r3, #12]
 8005686:	e062      	b.n	800574e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800568e:	e05e      	b.n	800574e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005690:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005694:	2b08      	cmp	r3, #8
 8005696:	d828      	bhi.n	80056ea <UART_SetConfig+0x56a>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <UART_SetConfig+0x520>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	080056eb 	.word	0x080056eb
 80056b0:	080056db 	.word	0x080056db
 80056b4:	080056eb 	.word	0x080056eb
 80056b8:	080056eb 	.word	0x080056eb
 80056bc:	080056eb 	.word	0x080056eb
 80056c0:	080056e3 	.word	0x080056e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c4:	f7fd fb82 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 80056c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ca:	e014      	b.n	80056f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7fd fb94 	bl	8002df8 <HAL_RCC_GetPCLK2Freq>
 80056d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056d2:	e010      	b.n	80056f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005740 <UART_SetConfig+0x5c0>)
 80056d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056d8:	e00d      	b.n	80056f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056da:	f7fd fb09 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 80056de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056e0:	e009      	b.n	80056f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056e8:	e005      	b.n	80056f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056f4:	bf00      	nop
    }

    if (pclk != 0U)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d028      	beq.n	800574e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	4a10      	ldr	r2, [pc, #64]	@ (8005744 <UART_SetConfig+0x5c4>)
 8005702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005706:	461a      	mov	r2, r3
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	fbb3 f2f2 	udiv	r2, r3, r2
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	441a      	add	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	d910      	bls.n	8005748 <UART_SetConfig+0x5c8>
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572c:	d20c      	bcs.n	8005748 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	b29a      	uxth	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	e009      	b.n	800574e <UART_SetConfig+0x5ce>
 800573a:	bf00      	nop
 800573c:	40008000 	.word	0x40008000
 8005740:	00f42400 	.word	0x00f42400
 8005744:	080063b4 	.word	0x080063b4
      }
      else
      {
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2201      	movs	r2, #1
 8005752:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2201      	movs	r2, #1
 800575a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800576a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800576e:	4618      	mov	r0, r3
 8005770:	3730      	adds	r7, #48	@ 0x30
 8005772:	46bd      	mov	sp, r7
 8005774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01a      	beq.n	800588e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005876:	d10a      	bne.n	800588e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b098      	sub	sp, #96	@ 0x60
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058cc:	f7fb ff02 	bl	80016d4 <HAL_GetTick>
 80058d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d12f      	bne.n	8005940 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e8:	2200      	movs	r2, #0
 80058ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f88e 	bl	8005a10 <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d022      	beq.n	8005940 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800590e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005918:	647b      	str	r3, [r7, #68]	@ 0x44
 800591a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800591e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e6      	bne.n	80058fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e063      	b.n	8005a08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b04      	cmp	r3, #4
 800594c:	d149      	bne.n	80059e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005956:	2200      	movs	r2, #0
 8005958:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f857 	bl	8005a10 <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d03c      	beq.n	80059e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	623b      	str	r3, [r7, #32]
   return(result);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800597c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005986:	633b      	str	r3, [r7, #48]	@ 0x30
 8005988:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800598c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e6      	bne.n	8005968 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ba:	61fa      	str	r2, [r7, #28]
 80059bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	69b9      	ldr	r1, [r7, #24]
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	617b      	str	r3, [r7, #20]
   return(result);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e5      	bne.n	800599a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e012      	b.n	8005a08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3758      	adds	r7, #88	@ 0x58
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a20:	e04f      	b.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d04b      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fb fe53 	bl	80016d4 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e04e      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d037      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b80      	cmp	r3, #128	@ 0x80
 8005a56:	d034      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b40      	cmp	r3, #64	@ 0x40
 8005a5c:	d031      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d110      	bne.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2208      	movs	r2, #8
 8005a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f920 	bl	8005cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2208      	movs	r2, #8
 8005a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e029      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a9c:	d111      	bne.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f906 	bl	8005cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e00f      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	bf0c      	ite	eq
 8005ad2:	2301      	moveq	r3, #1
 8005ad4:	2300      	movne	r3, #0
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d0a0      	beq.n	8005a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b096      	sub	sp, #88	@ 0x58
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2222      	movs	r2, #34	@ 0x22
 8005b14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02d      	beq.n	8005b7e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b28:	4a40      	ldr	r2, [pc, #256]	@ (8005c2c <UART_Start_Receive_DMA+0x140>)
 8005b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b32:	4a3f      	ldr	r2, [pc, #252]	@ (8005c30 <UART_Start_Receive_DMA+0x144>)
 8005b34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c34 <UART_Start_Receive_DMA+0x148>)
 8005b3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b46:	2200      	movs	r2, #0
 8005b48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3324      	adds	r3, #36	@ 0x24
 8005b56:	4619      	mov	r1, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	f7fb ff7c 	bl	8001a5c <HAL_DMA_Start_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e051      	b.n	8005c22 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d018      	beq.n	8005bb8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e6      	bne.n	8005b86 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bd8:	637a      	str	r2, [r7, #52]	@ 0x34
 8005bda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e5      	bne.n	8005bb8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c0c:	623a      	str	r2, [r7, #32]
 8005c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	6a3a      	ldr	r2, [r7, #32]
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3758      	adds	r7, #88	@ 0x58
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08005e45 	.word	0x08005e45
 8005c30:	08005f79 	.word	0x08005f79
 8005c34:	08005fbf 	.word	0x08005fbf

08005c38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b08f      	sub	sp, #60	@ 0x3c
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c60:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e6      	bne.n	8005c40 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3308      	adds	r3, #8
 8005c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c92:	61ba      	str	r2, [r7, #24]
 8005c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6979      	ldr	r1, [r7, #20]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e5      	bne.n	8005c72 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005cae:	bf00      	nop
 8005cb0:	373c      	adds	r7, #60	@ 0x3c
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b095      	sub	sp, #84	@ 0x54
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ce2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e6      	bne.n	8005cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3308      	adds	r3, #8
 8005d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e3      	bne.n	8005cf4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d118      	bne.n	8005d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f023 0310 	bic.w	r3, r3, #16
 8005d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e6      	bne.n	8005d34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d7a:	bf00      	nop
 8005d7c:	3754      	adds	r7, #84	@ 0x54
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b090      	sub	sp, #64	@ 0x40
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d137      	bne.n	8005e12 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	623b      	str	r3, [r7, #32]
   return(result);
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dca:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e5      	bne.n	8005daa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	617b      	str	r3, [r7, #20]
   return(result);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e10:	e004      	b.n	8005e1c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8005e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e18:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e1a:	4798      	blx	r3
}
 8005e1c:	bf00      	nop
 8005e1e:	3740      	adds	r7, #64	@ 0x40
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b09c      	sub	sp, #112	@ 0x70
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d171      	bne.n	8005f44 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e6      	bne.n	8005e68 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eac:	f023 0301 	bic.w	r3, r3, #1
 8005eb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005eba:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ebc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ec0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e5      	bne.n	8005e9a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d118      	bne.n	8005f44 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e6      	bne.n	8005f12 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f46:	2200      	movs	r2, #0
 8005f48:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d109      	bne.n	8005f66 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f5a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005f5e:	4611      	mov	r1, r2
 8005f60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f62:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f64:	e004      	b.n	8005f70 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8005f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f6e:	4798      	blx	r3
}
 8005f70:	bf00      	nop
 8005f72:	3770      	adds	r7, #112	@ 0x70
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10b      	bne.n	8005fac <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005fa0:	0852      	lsrs	r2, r2, #1
 8005fa2:	b292      	uxth	r2, r2
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005faa:	e004      	b.n	8005fb6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	4798      	blx	r3
}
 8005fb6:	bf00      	nop
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe6:	2b80      	cmp	r3, #128	@ 0x80
 8005fe8:	d109      	bne.n	8005ffe <UART_DMAError+0x40>
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b21      	cmp	r3, #33	@ 0x21
 8005fee:	d106      	bne.n	8005ffe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8005ff8:	6978      	ldr	r0, [r7, #20]
 8005ffa:	f7ff fe1d 	bl	8005c38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	d109      	bne.n	8006020 <UART_DMAError+0x62>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b22      	cmp	r3, #34	@ 0x22
 8006010:	d106      	bne.n	8006020 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800601a:	6978      	ldr	r0, [r7, #20]
 800601c:	f7ff fe4d 	bl	8005cba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006026:	f043 0210 	orr.w	r2, r3, #16
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800603a:	bf00      	nop
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606a:	bf00      	nop
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b088      	sub	sp, #32
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	60bb      	str	r3, [r7, #8]
   return(result);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6979      	ldr	r1, [r7, #20]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	613b      	str	r3, [r7, #16]
   return(result);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e6      	bne.n	800607a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c4:	bf00      	nop
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_UARTEx_DisableFifoMode+0x16>
 800611a:	2302      	movs	r3, #2
 800611c:	e027      	b.n	800616e <HAL_UARTEx_DisableFifoMode+0x66>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2224      	movs	r2, #36	@ 0x24
 800612a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800614c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800618e:	2302      	movs	r3, #2
 8006190:	e02d      	b.n	80061ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2224      	movs	r2, #36	@ 0x24
 800619e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f850 	bl	8006274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800620a:	2302      	movs	r3, #2
 800620c:	e02d      	b.n	800626a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2224      	movs	r2, #36	@ 0x24
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f812 	bl	8006274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006280:	2b00      	cmp	r3, #0
 8006282:	d108      	bne.n	8006296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006294:	e031      	b.n	80062fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006296:	2308      	movs	r3, #8
 8006298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800629a:	2308      	movs	r3, #8
 800629c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	0e5b      	lsrs	r3, r3, #25
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	0f5b      	lsrs	r3, r3, #29
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062be:	7bbb      	ldrb	r3, [r7, #14]
 80062c0:	7b3a      	ldrb	r2, [r7, #12]
 80062c2:	4911      	ldr	r1, [pc, #68]	@ (8006308 <UARTEx_SetNbDataToProcess+0x94>)
 80062c4:	5c8a      	ldrb	r2, [r1, r2]
 80062c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062ca:	7b3a      	ldrb	r2, [r7, #12]
 80062cc:	490f      	ldr	r1, [pc, #60]	@ (800630c <UARTEx_SetNbDataToProcess+0x98>)
 80062ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	7b7a      	ldrb	r2, [r7, #13]
 80062e0:	4909      	ldr	r1, [pc, #36]	@ (8006308 <UARTEx_SetNbDataToProcess+0x94>)
 80062e2:	5c8a      	ldrb	r2, [r1, r2]
 80062e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062e8:	7b7a      	ldrb	r2, [r7, #13]
 80062ea:	4908      	ldr	r1, [pc, #32]	@ (800630c <UARTEx_SetNbDataToProcess+0x98>)
 80062ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	080063cc 	.word	0x080063cc
 800630c:	080063d4 	.word	0x080063d4

08006310 <memset>:
 8006310:	4402      	add	r2, r0
 8006312:	4603      	mov	r3, r0
 8006314:	4293      	cmp	r3, r2
 8006316:	d100      	bne.n	800631a <memset+0xa>
 8006318:	4770      	bx	lr
 800631a:	f803 1b01 	strb.w	r1, [r3], #1
 800631e:	e7f9      	b.n	8006314 <memset+0x4>

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	@ (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	@ (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	@ (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	@ (8006364 <__libc_init_array+0x44>)
 8006334:	f000 f826 	bl	8006384 <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	080063e4 	.word	0x080063e4
 800635c:	080063e4 	.word	0x080063e4
 8006360:	080063e4 	.word	0x080063e4
 8006364:	080063e8 	.word	0x080063e8

08006368 <memcpy>:
 8006368:	440a      	add	r2, r1
 800636a:	4291      	cmp	r1, r2
 800636c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006370:	d100      	bne.n	8006374 <memcpy+0xc>
 8006372:	4770      	bx	lr
 8006374:	b510      	push	{r4, lr}
 8006376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800637a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637e:	4291      	cmp	r1, r2
 8006380:	d1f9      	bne.n	8006376 <memcpy+0xe>
 8006382:	bd10      	pop	{r4, pc}

08006384 <_init>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr

08006390 <_fini>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr
